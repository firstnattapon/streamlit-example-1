import streamlit as st
import numpy as np
import datetime # ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâd‡∏ô‡∏µ‡πâ ‡πÅ‡∏ï‡πà import ‡πÑ‡∏ß‡πâ‡πÄ‡∏ú‡∏∑‡πà‡∏≠
import thingspeak
import pandas as pd
import yfinance as yf
import json

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö Streamlit
st.set_page_config(page_title="Monitor", page_icon="üìà" , layout="wide" )

# ---‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ThingSpeak Channel ‡∏´‡∏•‡∏±‡∏Å (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Asset) ---
channel_id = 2528199 # ID ‡∏Ç‡∏≠‡∏á Channel ThingSpeak
write_api_key = '2E65V8XEIPH9B2VV' # Write API Key (‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏±‡∏ö)
client = thingspeak.Channel(channel_id, write_api_key , fmt='json') # ‡∏™‡∏£‡πâ‡∏≤‡∏á Object Channel

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢ (sell) ---
def sell (asset = 0 , fix_c=1500 , Diff=60):
    # asset: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå
    # fix_c: ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ (‡πÄ‡∏ä‡πà‡∏ô 1500 ‡∏ö‡∏≤‡∏ó)
    # Diff: ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡πÄ‡∏ä‡πà‡∏ô 60 ‡∏ö‡∏≤‡∏ó)
    # ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏Ñ‡∏∑‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì fix_c - Diff
    s1 =  (fix_c - Diff) / asset if asset != 0 else 0 # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢‡∏®‡∏π‡∏ô‡∏¢‡πå)
    s2 =  round(s1, 2) # ‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏©‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° 2 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    s3 =  s2  * asset # ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏©
    s4 =  abs(s3 - (fix_c - Diff)) # ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á (fix_c - Diff)
                                     # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏î‡∏¥‡∏° s4 = abs(s3 - fix_c) ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô abs(s3 - (fix_c - Diff)) ‡∏´‡∏£‡∏∑‡∏≠ abs(fix_c - Diff - s3)
                                     # ‡πÅ‡∏ï‡πà‡∏à‡∏≤‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏° s4 = abs(s3 - fix_c) ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô
    s4_corrected = abs(s3 - (fix_c - Diff)) # ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    s5 =  round( s4_corrected / s2 ) if s2 != 0 else 0 # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢‡∏®‡∏π‡∏ô‡∏¢‡πå)
                                                # ‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏ä‡πâ s4 ‡∏ã‡∏∂‡πà‡∏á‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ Diff ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á
    s6 =  s5*s2 # ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö
    s7 =  (asset * s2) + s6 # ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏±‡∏ö (‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô (asset-s5)*s2 ‡∏´‡∏£‡∏∑‡∏≠ asset*s2 - s6 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢)
                           # ‡∏à‡∏≤‡∏Å‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡πÄ‡∏î‡∏¥‡∏°: (asset * s2) + s6 ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤ ‡∏ã‡∏∂‡πà‡∏á‡∏Ç‡∏±‡∏î‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£ "‡∏Ç‡∏≤‡∏¢" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡πÉ‡∏´‡πâ‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á fix_c - Diff
                           # ‡∏ñ‡πâ‡∏≤ s2 ‡∏Ñ‡∏∑‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢, s5 ‡∏Ñ‡∏∑‡∏≠‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö (‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏Ç‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ target)
                           # ‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏Ñ‡∏á‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏°‡∏≤
                           # s2 ‡∏Ñ‡∏∑‡∏≠ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢, s5 ‡∏Ñ‡∏∑‡∏≠ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö (amount), s7 ‡∏Ñ‡∏∑‡∏≠ ‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏° (cost)
    return s2 , s5 , round(s7, 2) # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ ‡∏£‡∏≤‡∏Ñ‡∏≤, ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏õ‡∏£‡∏±‡∏ö, ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠ (buy) ---
def buy (asset = 0 , fix_c=1500 , Diff=60):
    # ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ñ‡∏∑‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì fix_c + Diff
    b1 =  (fix_c + Diff) / asset if asset != 0 else 0 # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
    b2 =  round(b1, 2) # ‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏©‡∏£‡∏≤‡∏Ñ‡∏≤
    b3 =  b2 * asset # ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°
    b4 =  abs(b3 - (fix_c + Diff)) # ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ (fix_c + Diff)
                                   # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏î‡∏¥‡∏° b4 = abs(b3 - fix_c)
    b4_corrected = abs(b3 - (fix_c + Diff))
    b5 =  round( b4_corrected / b2 ) if b2 != 0 else 0 # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö
                                                # ‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏ä‡πâ b4
    b6 =  b5*b2 # ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö
    b7 =  (asset * b2) - b6 # ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏±‡∏ö
                           # b2 ‡∏Ñ‡∏∑‡∏≠ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢, b5 ‡∏Ñ‡∏∑‡∏≠ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö (amount), b7 ‡∏Ñ‡∏∑‡∏≠ ‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏° (cost)
    return b2 , b5 , round(b7, 2) # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ ‡∏£‡∏≤‡∏Ñ‡∏≤, ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏õ‡∏£‡∏±‡∏ö, ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢

# --- ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ThingSpeak Channel ‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ fx_js ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡∏™‡∏∏‡πà‡∏°) ---
channel_id_2 = 2385118
write_api_key_2 = 'IPSG3MMMBJEB9DY8' # Write API Key (‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏±‡∏ö)
client_2 = thingspeak.Channel(channel_id_2, write_api_key_2 , fmt='json' )

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Monitor ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á action ‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏° ---
def Monitor (Ticker = 'FFWM' , field = 2  ):
    # Ticker: ‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô
    # field: ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç field ‡πÉ‡∏ô channel_id_2 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ fx_js
    try:
        tickerData = yf.Ticker(Ticker) # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡∏à‡∏≤‡∏Å Yahoo Finance
        tickerData = round(tickerData.history(period= 'max' )[['Close']] , 3 ) # ‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î ‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏© 3 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
        tickerData.index = tickerData.index.tz_convert(tz='Asia/Bangkok') # ‡πÅ‡∏õ‡∏•‡∏á timezone ‡πÄ‡∏õ‡πá‡∏ô Asia/Bangkok
        filter_date = '2023-01-01 12:00:00+07:00' # ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        tickerData = tickerData[tickerData.index >= filter_date] # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà

        fx_data_str = client_2.get_field_last(field='{}'.format(field)) # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å field ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
        fx_js_data = json.loads(fx_data_str) # ‡πÅ‡∏õ‡∏•‡∏á JSON string ‡πÄ‡∏õ‡πá‡∏ô Python object

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ field ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô None ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if fx_js_data and "field{}".format(field) in fx_js_data and fx_js_data["field{}".format(field)] is not None:
            fx_js = int(fx_js_data["field{}".format(field)]) # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô integer ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô seed
        else:
            st.warning(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Ticker {Ticker}, field {field} ‡πÑ‡∏î‡πâ ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ seed ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô 0")
            fx_js = 0 # ‡∏´‡∏≤‡∏Å‡∏î‡∏∂‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô

        rng = np.random.default_rng(fx_js) # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡∏™‡∏∏‡πà‡∏°‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ seed ‡∏à‡∏≤‡∏Å ThingSpeak
        data = rng.integers(2, size = len(tickerData)) # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡∏™‡∏∏‡πà‡∏° 0 ‡∏´‡∏£‡∏∑‡∏≠ 1 ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô
        tickerData['action'] = data # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå action (0 ‡∏´‡∏£‡∏∑‡∏≠ 1)
        tickerData['index'] = [ i+1 for i in range(len(tickerData))] # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå index

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• d·ª± ƒëo√°n 5 ‡∏ß‡∏±‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤
        tickerData_1 = pd.DataFrame(columns=(tickerData.columns))
        if 'action' not in tickerData_1.columns: # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå action ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
            tickerData_1['action'] = np.nan
        # tickerData_1['action'] =  [ i for i in range(5)] # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ action ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 5 ‡∏ß‡∏±‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ (0,1,2,3,4) - ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö 0 ‡∏´‡∏£‡∏∑‡∏≠ 1 ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        tickerData_1.index = ['+0' , "+1" , "+2" , "+3" , "+4"] # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î index
        df = pd.concat([tickerData , tickerData_1], axis=0).fillna("") # ‡∏£‡∏ß‡∏° DataFrame ‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á

        rng = np.random.default_rng(fx_js) # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡∏™‡∏∏‡πà‡∏°‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏î‡πâ‡∏ß‡∏¢ seed ‡πÄ‡∏î‡∏¥‡∏° (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏ä‡∏∏‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤ fx_js ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)
        df['action'] = rng.integers(2, size = len(df)) # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î action ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô df (‡∏ó‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á tickerData_1)
        return df.tail(7) , fx_js # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 7 ‡πÅ‡∏ñ‡∏ß‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤ fx_js ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Monitor ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {Ticker}: {e}")
        # ‡∏Ñ‡∏∑‡∏ô DataFrame ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á
        empty_cols = ['Close', 'action', 'index']
        empty_df = pd.DataFrame(columns=empty_cols, index=[f'+{i}' for i in range(5)] + ['dummy1', 'dummy2'])
        empty_df = empty_df.fillna("")
        empty_df['action'] = 0 # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î action ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        return empty_df.tail(7), 0

# --- ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Monitor ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ Ticker ---
df_7   , fx_js    = Monitor(Ticker = 'FFWM', field = 2    )
df_7_1 , fx_js_1  = Monitor(Ticker = 'NEGG', field = 3    )
df_7_2 , fx_js_2  = Monitor(Ticker = 'RIVN', field = 4 )
df_7_3 , fx_js_3  = Monitor(Ticker = 'APLS', field = 5 )
df_7_4 , fx_js_4  = Monitor(Ticker = 'NVTS', field = 6 )
df_7_5 , fx_js_5  = Monitor(Ticker = 'QXO', field = 7 )
df_7_6 , fx_js_6  = Monitor(Ticker = 'RXRX', field = 8 ) # Ticker ‡πÉ‡∏´‡∏°‡πà RXRX

# --- ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô toggle ---
# nex = 0 # ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏¢ session_state ‡πÅ‡∏ó‡∏ô
# Nex_day_sell = 0 # ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏¢ session_state ‡πÅ‡∏ó‡∏ô
toggle = lambda x : 1 - x # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏•‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ 0 ‡πÄ‡∏õ‡πá‡∏ô 1, 1 ‡πÄ‡∏õ‡πá‡∏ô 0

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° "nex_day" (‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ) ---
# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ô session_state ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
if 'nex' not in st.session_state:
    st.session_state.nex = 0
if 'Nex_day_sell' not in st.session_state:
    st.session_state.Nex_day_sell = 0

# ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å session_state ‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
nex = st.session_state.nex
Nex_day_sell = st.session_state.Nex_day_sell

Nex_day_checkbox = st.checkbox('nex_day (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π action ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ +1 ‡∏ñ‡∏∂‡∏á +4)')
if Nex_day_checkbox :
    st.write( "‡∏Ñ‡πà‡∏≤ nex ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏à‡∏≤‡∏Å session_state) = " , nex)
    nex_col , Nex_day_sell_col ,_,_,_  = st.columns(5)

    if nex_col.button("Nex_day (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤ nex)"):
        # nex = 1 # ‡∏Ñ‡πà‡∏≤ nex ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏ú‡πà‡∏≤‡∏ô st.slider ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ +1
        if st.session_state.nex < 4 : # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ nex ‡πÄ‡∏Å‡∏¥‡∏ô 4 (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö +0 ‡∏ñ‡∏∂‡∏á +4)
             st.session_state.nex += 1
        else:
             st.session_state.nex = 0 # ‡∏ß‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà 0
        st.write( "nex ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô = " , st.session_state.nex)
        st.rerun() # ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI

    # ‡πÄ‡∏û‡∏¥‡πà‡∏° slider ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤ nex ‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
    new_nex = st.slider("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤ nex (0-4 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö +0 ‡∏ñ‡∏∂‡∏á +4)", 0, 4, st.session_state.nex, key="nex_slider")
    if new_nex != st.session_state.nex:
        st.session_state.nex = new_nex
        st.rerun()


    if Nex_day_sell_col.button("Nex_day_sell (‡∏™‡∏•‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞)"):
        st.session_state.Nex_day_sell = 1 - st.session_state.Nex_day_sell # Toggle 0 ‡∏´‡∏£‡∏∑‡∏≠ 1
        st.write( "Nex_day_sell ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô = " , st.session_state.Nex_day_sell)
        st.rerun() # ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà

    st.write(f"‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Nex_day_sell ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {'ON (‡∏™‡∏•‡∏±‡∏ö action)' if st.session_state.Nex_day_sell == 1 else 'OFF (‡πÑ‡∏°‡πà‡∏™‡∏•‡∏±‡∏ö action)'}")

st.write("_____") # ‡πÄ‡∏™‡πâ‡∏ô‡∏Ñ‡∏±‡πà‡∏ô

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Asset ‡πÅ‡∏•‡∏∞ Diff ---
# ‡πÅ‡∏ö‡πà‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö input ‡∏ï‡πà‡∏≤‡∏á‡πÜ
col13, col16, col14, col15, col17, col18, col19, col20, col21 = st.columns(9)

x_2 = col16.number_input('Diff (‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πà‡∏≤‡∏á)', step=1 , value= 60 , help="‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ã‡∏∑‡πâ‡∏≠/‡∏Ç‡∏≤‡∏¢")

# --- ‡∏™‡πà‡∏ß‡∏ô "Start" ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Asset ‡πÑ‡∏õ‡∏¢‡∏±‡∏á ThingSpeak ---
Start = col13.checkbox('Start (‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Asset)')
if Start :
    with col13.expander("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Asset ‡πÑ‡∏õ‡∏¢‡∏±‡∏á ThingSpeak (Field 1-7)"): # ‡πÉ‡∏ä‡πâ expander ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö
        # FFWM
        thingspeak_1 = st.checkbox('@_FFWM_ASSET')
        if thingspeak_1 :
            add_1 = st.number_input('@_FFWM_ASSET_val (field1)', step=0.001 ,  value=0.0, key="add_1_val_ts")
            if st.button("GO! FFWM", key="go_ffwm_ts"):
                client.update( {'field1': add_1 } )
                st.write(f"FFWM Asset (field1) ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô: {add_1}")
                st.success("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

        # NEGG
        thingspeak_2 = st.checkbox('@_NEGG_ASSET')
        if thingspeak_2 :
            add_2 = st.number_input('@_NEGG_ASSET_val (field2)', step=0.001 ,  value=0.0, key="add_2_val_ts")
            if st.button("GO! NEGG", key="go_negg_ts"):
                client.update( {'field2': add_2 }  )
                st.write(f"NEGG Asset (field2) ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô: {add_2}")
                st.success("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        # RIVN
        thingspeak_3 = st.checkbox('@_RIVN_ASSET')
        if thingspeak_3 :
            add_3 = st.number_input('@_RIVN_ASSET_val (field3)', step=0.001 ,  value=0.0, key="add_3_val_ts")
            if st.button("GO! RIVN", key="go_rivn_ts"):
                client.update( {'field3': add_3 }  )
                st.write(f"RIVN Asset (field3) ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô: {add_3}")
                st.success("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        # APLS
        thingspeak_4 = st.checkbox('@_APLS_ASSET')
        if thingspeak_4 :
            add_4 = st.number_input('@_APLS_ASSET_val (field4)', step=0.001 ,  value=0.0, key="add_4_val_ts")
            if st.button("GO! APLS", key="go_apls_ts"):
                client.update( {'field4': add_4 }  )
                st.write(f"APLS Asset (field4) ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô: {add_4}")
                st.success("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        # NVTS
        thingspeak_5 = st.checkbox('@_NVTS_ASSET')
        if thingspeak_5:
            add_5 = st.number_input('@_NVTS_ASSET_val (field5)', step=0.001, value= 0.0, key="add_5_val_ts")
            if st.button("GO! NVTS", key="go_nvts_ts"):
                client.update({'field5': add_5})
                st.write(f"NVTS Asset (field5) ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô: {add_5}")
                st.success("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        # QXO
        thingspeak_6 = st.checkbox('@_QXO_ASSET')
        if thingspeak_6:
            add_6 = st.number_input('@_QXO_ASSET_val (field6)', step=0.001, value=0.0, key="add_6_val_ts")
            if st.button("GO! QXO", key="go_qxo_ts"):
                client.update({'field6': add_6})
                st.write(f"QXO Asset (field6) ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô: {add_6}")
                st.success("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        # RXRX
        thingspeak_7 = st.checkbox('@_RXRX_ASSET') # Ticker ‡πÉ‡∏´‡∏°‡πà RXRX
        if thingspeak_7:
            add_7 = st.number_input('@_RXRX_ASSET_val (field7)', step=0.001, value=0.0, key="add_7_val_ts")
            if st.button("GO! RXRX", key="go_rxrx_ts"):
                client.update({'field7': add_7}) # ‡πÉ‡∏ä‡πâ field7 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö RXRX
                st.write(f"RXRX Asset (field7) ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô: {add_7}")
                st.success("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å ThingSpeak field ---
def get_thingspeak_field_value(client_obj, field_name, default_value=0.0):
    try:
        last_value_str = client_obj.get_field_last(field=field_name) # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• raw string
        last_value_json = json.loads(last_value_str) # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ field_name ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô JSON ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà null
        if field_name in last_value_json and last_value_json[field_name] is not None:
            return float(last_value_json[field_name]) # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô float
        else:
            # st.warning(f"Field {field_name} ‡πÑ‡∏°‡πà‡∏û‡∏ö ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô null ‡πÉ‡∏ô ThingSpeak ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô {default_value}")
            return default_value
    except Exception as e:
        # st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ThingSpeak field {field_name}: {e} ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô {default_value}")
        return default_value

# --- ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ Asset ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å ThingSpeak ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ Ticker ---
FFWM_ASSET_LAST = get_thingspeak_field_value(client, 'field1')
NEGG_ASSET_LAST = get_thingspeak_field_value(client, 'field2')
RIVN_ASSET_LAST = get_thingspeak_field_value(client, 'field3')
APLS_ASSET_LAST = get_thingspeak_field_value(client, 'field4')
NVTS_ASSET_LAST = get_thingspeak_field_value(client, 'field5')
QXO_ASSET_LAST = get_thingspeak_field_value(client, 'field6')
RXRX_ASSET_LAST = get_thingspeak_field_value(client, 'field7') # Ticker ‡πÉ‡∏´‡∏°‡πà RXRX (‡πÉ‡∏ä‡πâ field7)

# --- Input ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Asset ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ Ticker (‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡πÑ‡∏ß‡πâ) ---
x_4 = col15.number_input('FFWM_ASSET (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢)', step=0.001  , value= FFWM_ASSET_LAST, key="ffwm_asset_main_ni", help="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢ FFWM ‡∏ó‡∏µ‡πà‡∏°‡∏µ")
x_3 = col14.number_input('NEGG_ASSET (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢)', step=0.001 ,  value= NEGG_ASSET_LAST, key="negg_asset_main_ni", help="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢ NEGG ‡∏ó‡∏µ‡πà‡∏°‡∏µ")
x_5 = col17.number_input('RIVN_ASSET (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢)', step=0.001  , value= RIVN_ASSET_LAST, key="rivn_asset_main_ni", help="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢ RIVN ‡∏ó‡∏µ‡πà‡∏°‡∏µ")
x_6 = col18.number_input('APLS_ASSET (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢)', step=0.001  , value= APLS_ASSET_LAST, key="apls_asset_main_ni", help="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢ APLS ‡∏ó‡∏µ‡πà‡∏°‡∏µ")
x_7 = col19.number_input('NVTS_ASSET (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢)', step=0.001  , value= NVTS_ASSET_LAST, key="nvts_asset_main_ni", help="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢ NVTS ‡∏ó‡∏µ‡πà‡∏°‡∏µ")

QXO_OPTION_val = 79.0 # ‡∏Ñ‡πà‡∏≤ Option ‡∏Ç‡∏≠‡∏á QXO (‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà)
QXO_REAL_val   =  col20.number_input('QXO_ASSET (LV:79@19.0) (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢)', step=0.001  , value=  QXO_ASSET_LAST, key="qxo_asset_main_ni", help="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢ QXO ‡∏à‡∏£‡∏¥‡∏á ‡∏ó‡∏µ‡πà‡∏°‡∏µ (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° Option)")
x_8 =  QXO_OPTION_val  + QXO_REAL_val # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢ QXO ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏£‡∏ß‡∏° Option)

RXRX_OPTION_val = 278.0 # ‡∏Ñ‡πà‡∏≤ Option ‡∏Ç‡∏≠‡∏á RXRX (‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà)
RXRX_REAL_val   =  col21.number_input('RXRX_ASSET (LV:278@5.4) (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢)', step=0.001  , value=  RXRX_ASSET_LAST, key="rxrx_asset_main_ni", help="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢ RXRX ‡∏à‡∏£‡∏¥‡∏á ‡∏ó‡∏µ‡πà‡∏°‡∏µ (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° Option)")
x_9 =  RXRX_OPTION_val  + RXRX_REAL_val # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢ RXRX ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏£‡∏ß‡∏° Option)

st.write("_____") # ‡πÄ‡∏™‡πâ‡∏ô‡∏Ñ‡∏±‡πà‡∏ô

# --- ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå Sell/Buy ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ Ticker ---
# ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å sell(asset, Diff) ‡∏Ñ‡∏∑‡∏≠ (‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≤‡∏¢, ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á, ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á)
# ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å buy(asset, Diff) ‡∏Ñ‡∏∑‡∏≠ (‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ã‡∏∑‡πâ‡∏≠, ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á, ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á)

# NEGG
s8_price_sell_negg, s9_amount_sell_negg, s10_cost_sell_negg =  sell( asset = x_3 , Diff= x_2)
b8_price_buy_negg, b9_amount_buy_negg, b10_cost_buy_negg =  buy(asset = x_3 , Diff= x_2)

# FFWM
s11_price_sell_ffwm, s12_amount_sell_ffwm, s13_cost_sell_ffwm =  sell(asset = x_4 , Diff= x_2)
b11_price_buy_ffwm, b12_amount_buy_ffwm, b13_cost_buy_ffwm =  buy(asset = x_4 , Diff= x_2)

# RIVN
u1_price_sell_rivn, u2_amount_sell_rivn, u3_cost_sell_rivn = sell( asset = x_5 , Diff= x_2)
u4_price_buy_rivn, u5_amount_buy_rivn, u6_cost_buy_rivn = buy( asset = x_5 , Diff= x_2)

# APLS
p1_price_sell_apls, p2_amount_sell_apls, p3_cost_sell_apls = sell( asset = x_6 , Diff= x_2)
p4_price_buy_apls, p5_amount_buy_apls, p6_cost_buy_apls = buy( asset = x_6 , Diff= x_2)

# NVTS
u7_price_sell_nvts, u8_amount_sell_nvts, u9_cost_sell_nvts = sell( asset = x_7 , Diff= x_2)
p7_price_buy_nvts, p8_amount_buy_nvts, p9_cost_buy_nvts = buy( asset = x_7 , Diff= x_2)

# QXO
q1_price_sell_qxo, q2_amount_sell_qxo, q3_cost_sell_qxo = sell(asset=x_8, Diff=x_2)
q4_price_buy_qxo, q5_amount_buy_qxo, q6_cost_buy_qxo = buy(asset=x_8, Diff=x_2)

# RXRX (Ticker ‡πÉ‡∏´‡∏°‡πà)
r1_price_sell_rxrx, r2_amount_sell_rxrx, r3_cost_sell_rxrx = sell(asset=x_9, Diff=x_2)
r4_price_buy_rxrx, r5_amount_buy_rxrx, r6_cost_buy_rxrx = buy(asset=x_9, Diff=x_2)


# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏´‡∏∏‡πâ‡∏ô ---
def get_last_price(ticker_symbol):
    try:
        price = yf.Ticker(ticker_symbol).fast_info.get('lastPrice')
        if price is None:
            # st.warning(f"‡πÑ‡∏°‡πà‡∏û‡∏ö 'lastPrice' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {ticker_symbol} ‡πÉ‡∏ô fast_info ‡∏≠‡∏≤‡∏à‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å history")
            hist = yf.Ticker(ticker_symbol).history(period="1d")
            if not hist.empty:
                price = hist['Close'].iloc[-1]
            else:
                # st.warning(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á {ticker_symbol} ‡πÑ‡∏î‡πâ")
                return 0.0
        return float(price) if price is not None else 0.0
    except Exception as e:
        # st.warning(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á {ticker_symbol}: {e}")
        return 0.0 # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ action ‡∏à‡∏≤‡∏Å DataFrame ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ---
def get_action_value(df_action_values, index_val, default_value=0):
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ index_val ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏Ç‡∏≠‡∏á df_action_values ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if 0 <= index_val < len(df_action_values):
            action = df_action_values[index_val]
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ action ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô int ‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÄ‡∏ä‡πà‡∏ô ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏ß‡πà‡∏≤‡∏á)
            if isinstance(action, (int, np.integer)) or (isinstance(action, str) and action.isdigit()):
                return int(action)
            else:
                # st.warning(f"‡∏Ñ‡πà‡∏≤ action ‡∏ó‡∏µ‡πà index {index_val} ('{action}') ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô {default_value}")
                return default_value
        else:
            # st.warning(f"Index {index_val} ‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö action values (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß: {len(df_action_values)}) ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô {default_value}")
            return default_value
    except IndexError:
        # st.warning(f"Index {index_val} ‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö action values ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô {default_value}")
        return default_value
    except ValueError:
        # st.warning(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ action ‡∏ó‡∏µ‡πà index {index_val} ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÑ‡∏î‡πâ ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô {default_value}")
        return default_value


# --- ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• Limit Order ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ Ticker ---
# ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á:
# Checkbox('Limut_Order_TICKER', value = <action ‡∏à‡∏≤‡∏Å df ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≤‡∏° nex ‡πÅ‡∏•‡∏∞ Nex_day_sell>)
# if Checkbox is True:
#   st.write('sell TICKER:', 'A', Amount_to_Sell, 'P', Price_to_Sell, 'C', Cost_of_Sell)
#   ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢ -> ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ThingSpeak
#   ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏•‡∏∞ P/L
#   st.write('buy TICKER:', 'A', Amount_to_Buy, 'P', Price_to_Buy, 'C', Cost_of_Buy)
#   ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠ -> ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ThingSpeak

# ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á A (Amount), P (Price), C (Cost)
# - 'sell TICKER: ...' ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô buy() ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ buy() ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ (‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡πâ‡∏á‡∏Ç‡∏≤‡∏¢)
#   ‡∏î‡∏±‡∏á‡∏ô‡∏±‡πâ‡∏ô A=b_amount, P=b_price, C=b_cost
# - 'buy TICKER: ...' ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô sell() ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ sell() ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ (‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡πâ‡∏á‡∏ã‡∏∑‡πâ‡∏≠)
#   ‡∏î‡∏±‡∏á‡∏ô‡∏±‡πâ‡∏ô A=s_amount, P=s_price, C=s_cost

st.markdown("---")
st.subheader("‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Limit Order")

# --- NEGG ---
with st.expander("NEGG Limit Orders", expanded=False):
    action_negg = get_action_value(df_7_1.action.values, 1 + nex)
    limut_order_negg_val = bool(np.where( Nex_day_sell == 1 ,  toggle(action_negg)   ,  action_negg   ))
    Limut_Order_NEGG = st.checkbox('‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á NEGG (‡∏ï‡∏≤‡∏° action)', value = limut_order_negg_val, key="negg_limit_order_cb", help=f"Action ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì: {action_negg}, Nex_day_sell: {Nex_day_sell}, ‡∏Ñ‡πà‡∏≤ Checkbox: {limut_order_negg_val}")

    if Limut_Order_NEGG :
        st.write( '‡∏Ç‡∏≤‡∏¢ NEGG ‡∏ó‡∏µ‡πà:', 'A (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢)', b9_amount_buy_negg, 'P (‡∏£‡∏≤‡∏Ñ‡∏≤)', b8_price_buy_negg,'C (‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°)', b10_cost_buy_negg)
        col1, col2 , col3  = st.columns([2,2,1]) # ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
        with col3: # ‡∏à‡∏±‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà 3
            sell_negg_match = st.checkbox('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ç‡∏≤‡∏¢ NEGG', key="sell_negg_match_cb")
            if sell_negg_match :
                if st.button("‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢ NEGG", key="go_negg_sell_btn"):
                    new_asset_val = NEGG_ASSET_LAST - b9_amount_buy_negg # ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Asset ‡∏ó‡∏µ‡πà‡∏°‡∏µ
                    client.update( {'field2': new_asset_val } ) # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï field2 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö NEGG
                    st.success(f"NEGG Asset ‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≤‡∏¢: {new_asset_val:.3f}")
                    st.rerun()

        current_price_negg = get_last_price('NEGG')
        pv_negg =  current_price_negg * x_3 # Portfolio Value ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        st.write(f"‡∏£‡∏≤‡∏Ñ‡∏≤ NEGG ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {current_price_negg:.3f}, ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï: {pv_negg:.2f} (‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏à‡∏≤‡∏Å‡πÄ‡∏õ‡πâ‡∏≤ 1500: {pv_negg - 1500:.2f})")
        st.markdown("---") # ‡πÄ‡∏™‡πâ‡∏ô‡∏Ñ‡∏±‡πà‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á sell ‡πÅ‡∏•‡∏∞ buy

        st.write( '‡∏ã‡∏∑‡πâ‡∏≠ NEGG ‡∏ó‡∏µ‡πà:', 'A (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢)', s9_amount_sell_negg,  'P (‡∏£‡∏≤‡∏Ñ‡∏≤)', s8_price_sell_negg, 'C (‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°)',s10_cost_sell_negg)
        col4, col5 , col6  = st.columns([2,2,1])
        with col6:
            buy_negg_match = st.checkbox('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ã‡∏∑‡πâ‡∏≠ NEGG', key="buy_negg_match_cb")
            if buy_negg_match :
                if st.button("‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠ NEGG", key="go_negg_buy_btn"):
                    new_asset_val = NEGG_ASSET_LAST + s9_amount_sell_negg # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Asset
                    client.update( {'field2': new_asset_val  } )
                    st.success(f"NEGG Asset ‡∏´‡∏•‡∏±‡∏á‡∏ã‡∏∑‡πâ‡∏≠: {new_asset_val:.3f}")
                    st.rerun()
    st.markdown("---") # ‡πÄ‡∏™‡πâ‡∏ô‡∏Ñ‡∏±‡πà‡∏ô‡∏ó‡πâ‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£

# --- FFWM ---
with st.expander("FFWM Limit Orders", expanded=False):
    action_ffwm = get_action_value(df_7.action.values, 1 + nex)
    limut_order_ffwm_val = bool(np.where(  Nex_day_sell == 1 ,  toggle(action_ffwm) ,  action_ffwm   ))
    Limut_Order_FFWM = st.checkbox('‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á FFWM (‡∏ï‡∏≤‡∏° action)',  value = limut_order_ffwm_val, key="ffwm_limit_order_cb",help=f"Action ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì: {action_ffwm}, Nex_day_sell: {Nex_day_sell}, ‡∏Ñ‡πà‡∏≤ Checkbox: {limut_order_ffwm_val}")

    if Limut_Order_FFWM :
        st.write( '‡∏Ç‡∏≤‡∏¢ FFWM ‡∏ó‡∏µ‡πà:' , 'A', b12_amount_buy_ffwm , 'P' , b11_price_buy_ffwm  , 'C' , b13_cost_buy_ffwm)
        col7, col8 , col9  = st.columns([2,2,1])
        with col9:
            sell_ffwm_match = col9.checkbox('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ç‡∏≤‡∏¢ FFWM', key="sell_ffwm_match_cb")
            if sell_ffwm_match :
                if col9.button("‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢ FFWM", key="go_ffwm_sell_btn"):
                    new_asset_val = FFWM_ASSET_LAST - b12_amount_buy_ffwm
                    client.update( {'field1': new_asset_val } ) # field1 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö FFWM
                    st.success(f"FFWM Asset ‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≤‡∏¢: {new_asset_val:.3f}")
                    st.rerun()

        current_price_ffwm = get_last_price('FFWM')
        pv_ffwm =   current_price_ffwm * x_4
        st.write(f"‡∏£‡∏≤‡∏Ñ‡∏≤ FFWM ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {current_price_ffwm:.3f}, ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï: {pv_ffwm:.2f} (‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏à‡∏≤‡∏Å‡πÄ‡∏õ‡πâ‡∏≤ 1500: {pv_ffwm - 1500:.2f})")
        st.markdown("---")

        st.write( '‡∏ã‡∏∑‡πâ‡∏≠ FFWM ‡∏ó‡∏µ‡πà:' , 'A', s12_amount_sell_ffwm , 'P' , s11_price_sell_ffwm  , 'C'  , s13_cost_sell_ffwm)
        col10, col11 , col12  = st.columns([2,2,1])
        with col12:
            buy_ffwm_match = col12.checkbox('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ã‡∏∑‡πâ‡∏≠ FFWM', key="buy_ffwm_match_cb")
            if buy_ffwm_match :
                if col12.button("‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠ FFWM", key="go_ffwm_buy_btn"):
                    new_asset_val = FFWM_ASSET_LAST + s12_amount_sell_ffwm
                    client.update( {'field1': new_asset_val  } )
                    st.success(f"FFWM Asset ‡∏´‡∏•‡∏±‡∏á‡∏ã‡∏∑‡πâ‡∏≠: {new_asset_val:.3f}")
                    st.rerun()
    st.markdown("---")

# --- RIVN ---
with st.expander("RIVN Limit Orders", expanded=False):
    action_rivn = get_action_value(df_7_2.action.values, 1 + nex)
    limut_order_rivn_val = bool(np.where(  Nex_day_sell == 1 ,  toggle(action_rivn)   ,  action_rivn   ))
    Limut_Order_RIVN = st.checkbox('‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á RIVN (‡∏ï‡∏≤‡∏° action)', value=limut_order_rivn_val, key="rivn_limit_order_cb", help=f"Action ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì: {action_rivn}, Nex_day_sell: {Nex_day_sell}, ‡∏Ñ‡πà‡∏≤ Checkbox: {limut_order_rivn_val}")

    if Limut_Order_RIVN :
        st.write( '‡∏Ç‡∏≤‡∏¢ RIVN ‡∏ó‡∏µ‡πà:' , 'A', u5_amount_buy_rivn , 'P' , u4_price_buy_rivn  , 'C' , u6_cost_buy_rivn)
        col77, col88 , col99  = st.columns([2,2,1])
        with col99:
            sell_RIVN_match = col99.checkbox('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ç‡∏≤‡∏¢ RIVN', key="sell_rivn_match_cb")
            if sell_RIVN_match :
                if col99.button("‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢ RIVN", key="go_rivn_sell_btn"):
                    new_asset_val = RIVN_ASSET_LAST - u5_amount_buy_rivn
                    client.update( {'field3': new_asset_val } ) # field3 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö RIVN
                    st.success(f"RIVN Asset ‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≤‡∏¢: {new_asset_val:.3f}")
                    st.rerun()

        current_price_rivn = get_last_price('RIVN')
        pv_rivn =   current_price_rivn * x_5
        st.write(f"‡∏£‡∏≤‡∏Ñ‡∏≤ RIVN ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {current_price_rivn:.3f}, ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï: {pv_rivn:.2f} (‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏à‡∏≤‡∏Å‡πÄ‡∏õ‡πâ‡∏≤ 1500: {pv_rivn - 1500:.2f})")
        st.markdown("---")

        st.write( '‡∏ã‡∏∑‡πâ‡∏≠ RIVN ‡∏ó‡∏µ‡πà:' , 'A', u2_amount_sell_rivn , 'P' , u1_price_sell_rivn  , 'C'  , u3_cost_sell_rivn)
        col100 , col111 , col122  = st.columns([2,2,1])
        with col122:
            buy_RIVN_match = col122.checkbox('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ã‡∏∑‡πâ‡∏≠ RIVN', key="buy_rivn_match_cb")
            if buy_RIVN_match :
                if col122.button("‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠ RIVN", key="go_rivn_buy_btn"):
                    new_asset_val = RIVN_ASSET_LAST + u2_amount_sell_rivn
                    client.update( {'field3': new_asset_val  } )
                    st.success(f"RIVN Asset ‡∏´‡∏•‡∏±‡∏á‡∏ã‡∏∑‡πâ‡∏≠: {new_asset_val:.3f}")
                    st.rerun()
    st.markdown("---")

# --- APLS ---
with st.expander("APLS Limit Orders", expanded=False):
    action_apls = get_action_value(df_7_3.action.values, 1 + nex)
    limut_order_apls_val = bool(np.where(  Nex_day_sell == 1 ,  toggle(action_apls)   ,  action_apls   ))
    Limut_Order_APLS = st.checkbox('‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á APLS (‡∏ï‡∏≤‡∏° action)',value = limut_order_apls_val, key="apls_limit_order_cb", help=f"Action ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì: {action_apls}, Nex_day_sell: {Nex_day_sell}, ‡∏Ñ‡πà‡∏≤ Checkbox: {limut_order_apls_val}")

    if Limut_Order_APLS :
        st.write( '‡∏Ç‡∏≤‡∏¢ APLS ‡∏ó‡∏µ‡πà:' , 'A', p5_amount_buy_apls , 'P' , p4_price_buy_apls  , 'C' , p6_cost_buy_apls)
        col_s_apls1, col_s_apls2, col_s_apls3  = st.columns([2,2,1])
        with col_s_apls3:
            sell_APLS_match = col_s_apls3.checkbox('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ç‡∏≤‡∏¢ APLS', key="sell_apls_match_cb")
            if sell_APLS_match :
                if col_s_apls3.button("‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢ APLS", key="go_apls_sell_btn"):
                    new_asset_val = APLS_ASSET_LAST - p5_amount_buy_apls
                    client.update( {'field4': new_asset_val } ) # field4 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö APLS
                    st.success(f"APLS Asset ‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≤‡∏¢: {new_asset_val:.3f}")
                    st.rerun()

        current_price_apls = get_last_price('APLS')
        pv_apls =   current_price_apls * x_6
        st.write(f"‡∏£‡∏≤‡∏Ñ‡∏≤ APLS ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {current_price_apls:.3f}, ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï: {pv_apls:.2f} (‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏à‡∏≤‡∏Å‡πÄ‡∏õ‡πâ‡∏≤ 1500: {pv_apls - 1500:.2f})")
        st.markdown("---")

        st.write( '‡∏ã‡∏∑‡πâ‡∏≠ APLS ‡∏ó‡∏µ‡πà:' , 'A', p2_amount_sell_apls , 'P' , p1_price_sell_apls  , 'C'  , p3_cost_sell_apls)
        col_b_apls1, col_b_apls2, col_b_apls3  = st.columns([2,2,1])
        with col_b_apls3:
            buy_APLS_match = col_b_apls3.checkbox('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ã‡∏∑‡πâ‡∏≠ APLS', key="buy_apls_match_cb")
            if buy_APLS_match :
                if col_b_apls3.button("‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠ APLS", key="go_apls_buy_btn"):
                    new_asset_val = APLS_ASSET_LAST + p2_amount_sell_apls
                    client.update( {'field4': new_asset_val  } )
                    st.success(f"APLS Asset ‡∏´‡∏•‡∏±‡∏á‡∏ã‡∏∑‡πâ‡∏≠: {new_asset_val:.3f}")
                    st.rerun()
    st.markdown("---")

# --- NVTS ---
with st.expander("NVTS Limit Orders", expanded=False):
    action_nvts = get_action_value(df_7_4.action.values, 1 + nex)
    limut_order_nvts_val = bool(np.where(  Nex_day_sell == 1 ,  toggle(action_nvts)   ,  action_nvts   ))
    Limut_Order_NVTS = st.checkbox('‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á NVTS (‡∏ï‡∏≤‡∏° action)', value=limut_order_nvts_val, key="nvts_limit_order_cb", help=f"Action ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì: {action_nvts}, Nex_day_sell: {Nex_day_sell}, ‡∏Ñ‡πà‡∏≤ Checkbox: {limut_order_nvts_val}")

    if Limut_Order_NVTS:
        st.write('‡∏Ç‡∏≤‡∏¢ NVTS ‡∏ó‡∏µ‡πà:', 'A', p8_amount_buy_nvts , 'P', p7_price_buy_nvts , 'C', p9_cost_buy_nvts)
        col_s_nvts1, col_s_nvts2, col_s_nvts3 = st.columns([2,2,1])
        with col_s_nvts3:
            sell_NVTS_match = col_s_nvts3.checkbox('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ç‡∏≤‡∏¢ NVTS', key="sell_nvts_match_cb")
            if sell_NVTS_match:
                if col_s_nvts3.button("‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢ NVTS", key="go_nvts_sell_btn"):
                    new_asset_val = NVTS_ASSET_LAST - p8_amount_buy_nvts
                    client.update({'field5': new_asset_val}) # field5 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö NVTS
                    st.success(f"NVTS Asset ‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≤‡∏¢: {new_asset_val:.3f}")
                    st.rerun()

        current_price_nvts = get_last_price('NVTS')
        pv_nvts = current_price_nvts * x_7
        st.write(f"‡∏£‡∏≤‡∏Ñ‡∏≤ NVTS ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {current_price_nvts:.3f}, ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï: {pv_nvts:.2f} (‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏à‡∏≤‡∏Å‡πÄ‡∏õ‡πâ‡∏≤ 1500: {pv_nvts - 1500:.2f})")
        st.markdown("---")

        st.write('‡∏ã‡∏∑‡πâ‡∏≠ NVTS ‡∏ó‡∏µ‡πà:', 'A', u8_amount_sell_nvts, 'P', u7_price_sell_nvts , 'C', u9_cost_sell_nvts)
        col_b_nvts1, col_b_nvts2, col_b_nvts3 = st.columns([2,2,1])
        with col_b_nvts3:
            buy_NVTS_match = col_b_nvts3.checkbox('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ã‡∏∑‡πâ‡∏≠ NVTS', key="buy_nvts_match_cb")
            if buy_NVTS_match:
                if col_b_nvts3.button("‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠ NVTS", key="go_nvts_buy_btn"):
                    new_asset_val = NVTS_ASSET_LAST + u8_amount_sell_nvts
                    client.update({'field5': new_asset_val})
                    st.success(f"NVTS Asset ‡∏´‡∏•‡∏±‡∏á‡∏ã‡∏∑‡πâ‡∏≠: {new_asset_val:.3f}")
                    st.rerun()
    st.markdown("---")

# --- QXO ---
with st.expander("QXO Limit Orders", expanded=False):
    action_qxo = get_action_value(df_7_5.action.values, 1 + nex)
    limut_order_qxo_val = bool(np.where(Nex_day_sell == 1, toggle(action_qxo), action_qxo))
    Limut_Order_QXO = st.checkbox('‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á QXO (‡∏ï‡∏≤‡∏° action)', value=limut_order_qxo_val, key="qxo_limit_order_cb", help=f"Action ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì: {action_qxo}, Nex_day_sell: {Nex_day_sell}, ‡∏Ñ‡πà‡∏≤ Checkbox: {limut_order_qxo_val}")

    if Limut_Order_QXO:
        st.write('‡∏Ç‡∏≤‡∏¢ QXO ‡∏ó‡∏µ‡πà:', 'A', q5_amount_buy_qxo, 'P', q4_price_buy_qxo, 'C', q6_cost_buy_qxo)
        col_s_qxo1, col_s_qxo2, col_s_qxo3 = st.columns([2,2,1])
        with col_s_qxo3:
            sell_QXO_match = col_s_qxo3.checkbox('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ç‡∏≤‡∏¢ QXO', key="sell_qxo_match_cb")
            if sell_QXO_match:
                if col_s_qxo3.button("‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢ QXO", key="go_qxo_sell_btn"):
                    new_asset_val = QXO_ASSET_LAST - q5_amount_buy_qxo
                    client.update({'field6': new_asset_val}) # field6 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö QXO
                    st.success(f"QXO Asset ‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≤‡∏¢: {new_asset_val:.3f}")
                    st.rerun()

        current_price_qxo = get_last_price('QXO')
        pv_qxo = current_price_qxo * x_8
        st.write(f"‡∏£‡∏≤‡∏Ñ‡∏≤ QXO ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {current_price_qxo:.3f}, ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï: {pv_qxo:.2f} (‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏à‡∏≤‡∏Å‡πÄ‡∏õ‡πâ‡∏≤ 1500: {pv_qxo - 1500:.2f})")
        st.markdown("---")

        st.write('‡∏ã‡∏∑‡πâ‡∏≠ QXO ‡∏ó‡∏µ‡πà:', 'A', q2_amount_sell_qxo, 'P', q1_price_sell_qxo, 'C', q3_cost_sell_qxo)
        col_b_qxo1, col_b_qxo2, col_b_qxo3 = st.columns([2,2,1])
        with col_b_qxo3:
            buy_QXO_match = col_b_qxo3.checkbox('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ã‡∏∑‡πâ‡∏≠ QXO', key="buy_qxo_match_cb")
            if buy_QXO_match:
                if col_b_qxo3.button("‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠ QXO", key="go_qxo_buy_btn"):
                    new_asset_val = QXO_ASSET_LAST + q2_amount_sell_qxo
                    client.update({'field6': new_asset_val})
                    st.success(f"QXO Asset ‡∏´‡∏•‡∏±‡∏á‡∏ã‡∏∑‡πâ‡∏≠: {new_asset_val:.3f}")
                    st.rerun()
    st.markdown("---")

# --- RXRX (Ticker ‡πÉ‡∏´‡∏°‡πà) ---
with st.expander("RXRX Limit Orders", expanded=False):
    action_rxrx = get_action_value(df_7_6.action.values, 1 + nex)
    limut_order_rxrx_val = bool(np.where(Nex_day_sell == 1, toggle(action_rxrx), action_rxrx))
    Limut_Order_RXRX = st.checkbox('‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á RXRX (‡∏ï‡∏≤‡∏° action)', value=limut_order_rxrx_val, key="rxrx_limit_order_cb", help=f"Action ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì: {action_rxrx}, Nex_day_sell: {Nex_day_sell}, ‡∏Ñ‡πà‡∏≤ Checkbox: {limut_order_rxrx_val}")

    if Limut_Order_RXRX:
        st.write('‡∏Ç‡∏≤‡∏¢ RXRX ‡∏ó‡∏µ‡πà:', 'A', r5_amount_buy_rxrx, 'P', r4_price_buy_rxrx, 'C', r6_cost_buy_rxrx)
        col_s_rxrx1, col_s_rxrx2, col_s_rxrx3 = st.columns([2,2,1])
        with col_s_rxrx3:
            sell_RXRX_match = col_s_rxrx3.checkbox('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ç‡∏≤‡∏¢ RXRX', key="sell_rxrx_match_cb")
            if sell_RXRX_match:
                if col_s_rxrx3.button("‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢ RXRX", key="go_rxrx_sell_btn"):
                    new_asset_val = RXRX_ASSET_LAST - r5_amount_buy_rxrx
                    client.update({'field7': new_asset_val}) # field7 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö RXRX
                    st.success(f"RXRX Asset ‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≤‡∏¢: {new_asset_val:.3f}")
                    st.rerun()

        current_price_rxrx = get_last_price('RXRX')
        pv_rxrx = current_price_rxrx * x_9
        st.write(f"‡∏£‡∏≤‡∏Ñ‡∏≤ RXRX ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {current_price_rxrx:.3f}, ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï: {pv_rxrx:.2f} (‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏à‡∏≤‡∏Å‡πÄ‡∏õ‡πâ‡∏≤ 1500: {pv_rxrx - 1500:.2f})")
        st.markdown("---")

        st.write('‡∏ã‡∏∑‡πâ‡∏≠ RXRX ‡∏ó‡∏µ‡πà:', 'A', r2_amount_sell_rxrx, 'P', r1_price_sell_rxrx, 'C', r3_cost_sell_rxrx)
        col_b_rxrx1, col_b_rxrx2, col_b_rxrx3 = st.columns([2,2,1])
        with col_b_rxrx3:
            buy_RXRX_match = col_b_rxrx3.checkbox('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ã‡∏∑‡πâ‡∏≠ RXRX', key="buy_rxrx_match_cb")
            if buy_RXRX_match:
                if col_b_rxrx3.button("‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠ RXRX", key="go_rxrx_buy_btn"):
                    new_asset_val = RXRX_ASSET_LAST + r2_amount_sell_rxrx
                    client.update({'field7': new_asset_val})
                    st.success(f"RXRX Asset ‡∏´‡∏•‡∏±‡∏á‡∏ã‡∏∑‡πâ‡∏≠: {new_asset_val:.3f}")
                    st.rerun()
    st.markdown("---")

st.write("_____") # ‡πÄ‡∏™‡πâ‡∏ô‡∏Ñ‡∏±‡πà‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢

# --- ‡∏õ‡∏∏‡πà‡∏° RERUN ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô ---
if st.button("‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (RERUN App)"):
    st.rerun()

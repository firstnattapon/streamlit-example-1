import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import io

def professional_dashboard():
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Dashboard
    """
    st.set_page_config(layout="wide", page_title="Backtest Results Dashboard")

    st.title("üìä Professional Backtest Results Dashboard")
    st.markdown("""
    ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå `best_seed_results.csv` ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á (Backtesting)
    ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å‡∏ï‡πà‡∏≤‡∏á‡πÜ
    """)

    # 1. File Uploader ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠
    uploaded_file = st.file_uploader(
        "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå 'best_seed' ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà",
        type=['csv']
    )

    if uploaded_file is not None:
        # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
        # ‡πÉ‡∏ä‡πâ io.StringIO ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ pandas ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡πÑ‡∏î‡πâ
        df = pd.read_csv(uploaded_file)

        # --- ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå ---
        st.success(f"‡πÑ‡∏ü‡∏•‡πå '{uploaded_file.name}' ‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

        # 2. ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏° (High-Level KPIs)
        st.header("üìà ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û (Overall Performance)")

        total_net_profit = df['max_net'].sum()
        winning_windows = df[df['max_net'] > 0].shape[0]
        total_windows = df.shape[0]
        win_rate = (winning_windows / total_windows) * 100 if total_windows > 0 else 0
        avg_action_count = df['action_count'].mean()

        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric(label="‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡∏£‡∏ß‡∏° (Total Net Profit)", value=f"{total_net_profit:,.2f}")
        with col2:
            st.metric(label="‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏ä‡∏ô‡∏∞ (Win Rate)", value=f"{win_rate:.2f}%", help=f"‡∏ä‡∏ô‡∏∞ {winning_windows} ‡∏à‡∏≤‡∏Å {total_windows} windows")
        with col3:
            st.metric(label="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Action ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠ Window", value=f"{avg_action_count:.2f}")

        # 3. ‡∏Å‡∏£‡∏≤‡∏ü‡∏´‡∏•‡∏±‡∏Å: ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö Net Profit ‡∏Å‡∏±‡∏ö Price Change
        st.header("üí∞ ‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥ (Net Profit) vs. ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤ (%)")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Figure ‡∏î‡πâ‡∏ß‡∏¢ Plotly Graph Objects ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏£‡∏≤‡∏ü 2 ‡πÅ‡∏Å‡∏ô
        fig_main = go.Figure()

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Net Profit (‡πÅ‡∏Å‡∏ô Y1 - ‡∏ã‡πâ‡∏≤‡∏¢)
        fig_main.add_trace(go.Bar(
            x=df['timeline'],
            y=df['max_net'],
            name='Net Profit',
            marker_color=['#2ca02c' if val > 0 else '#d62728' for val in df['max_net']], # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏ß‡∏Å, ‡πÅ‡∏î‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö
            yaxis='y1',
            hovertemplate='<b>Window %{customdata[0]}</b><br>' +
                          'Timeline: %{x}<br>' +
                          'Net Profit: %{y:,.2f}<extra></extra>',
            customdata=df[['window_number']]
        ))

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Price Change % (‡πÅ‡∏Å‡∏ô Y2 - ‡∏Ç‡∏ß‡∏≤)
        fig_main.add_trace(go.Scatter(
            x=df['timeline'],
            y=df['price_change_pct'],
            name='Price Change (%)',
            mode='lines+markers',
            marker=dict(color='#1f77b4'),
            line=dict(width=3),
            yaxis='y2',
            hovertemplate='<b>Window %{customdata[0]}</b><br>' +
                          'Timeline: %{x}<br>' +
                          'Price Change: %{y:.2f}%<extra></extra>',
            customdata=df[['window_number']]
        ))

        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Layout ‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏≤‡∏ü
        fig_main.update_layout(
            xaxis_title='Timeline Window',
            yaxis=dict(
                title='Net Profit',
                titlefont=dict(color='#2ca02c'),
                tickfont=dict(color='#2ca02c')
            ),
            yaxis2=dict(
                title='Price Change (%)',
                titlefont=dict(color='#1f77b4'),
                tickfont=dict(color='#1f77b4'),
                overlaying='y',
                side='right'
            ),
            legend=dict(x=0, y=1.1, orientation='h'),
            hovermode='x unified',
            height=500
        )
        st.plotly_chart(fig_main, use_container_width=True)


        # 4. ‡∏Å‡∏£‡∏≤‡∏ü‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        st.header("üîç ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (Additional Analysis)")
        col_a, col_b = st.columns(2)

        with col_a:
            st.subheader("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Action ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ Window")
            fig_actions = px.bar(
                df,
                x='timeline',
                y='action_count',
                title="Action Count per Window",
                labels={'timeline': 'Timeline Window', 'action_count': 'Number of Actions'},
                color='action_count',
                color_continuous_scale=px.colors.sequential.Viridis
            )
            fig_actions.update_layout(xaxis_title=None)
            st.plotly_chart(fig_actions, use_container_width=True)

        with col_b:
            st.subheader("Best Seed ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ Window")
            fig_seeds = px.line(
                df,
                x='timeline',
                y='best_seed',
                title="Best Seed per Window",
                labels={'timeline': 'Timeline Window', 'best_seed': 'Best Seed Value'},
                markers=True
            )
            fig_seeds.update_traces(line=dict(color='#ff7f0e', width=2))
            fig_seeds.update_layout(xaxis_title=None)
            st.plotly_chart(fig_seeds, use_container_width=True)

        # 5. ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏≤‡∏¢ Window (Drill-Down)
        st.header("üî¨ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏≤‡∏¢ Window (Detailed Window Analysis)")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á selectbox ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        options = df['window_number'].unique()
        selected_window = st.selectbox(
            '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Window ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:',
            options=options
        )

        if selected_window:
            # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞ window ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            window_data = df[df['window_number'] == selected_window].iloc[0]

            st.subheader(f"‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á Window #{selected_window}")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
            w_col1, w_col2, w_col3 = st.columns(3)
            with w_col1:
                st.metric("Net Profit", f"{window_data['max_net']:.2f}")
                st.metric("Price Change", f"{window_data['price_change_pct']:.2f}%")
            with w_col2:
                st.metric("Start Price", f"{window_data['start_price']:.2f}")
                st.metric("End Price", f"{window_data['end_price']:.2f}")
            with w_col3:
                st.metric("Best Seed", f"{window_data['best_seed']}")
                st.metric("Action Count", f"{window_data['action_count']}")

            # ‡πÅ‡∏™‡∏î‡∏á Action Sequence
            st.markdown(f"**Timeline:** `{window_data['timeline']}`")
            st.markdown("**Action Sequence:**")
            st.code(window_data['action_sequence'], language='json')
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            st.dataframe(window_data.to_frame().T.set_index('window_number'))

    else:
        # --- ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå ---
        st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
        st.markdown("### ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:")
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏î‡∏π
        sample_data = {
            'window_number': [1, 2],
            'timeline': ['2023-01-03 ‡∏ñ‡∏∂‡∏á 2023-02-14', '2023-02-15 ‡∏ñ‡∏∂‡∏á 2023-03-29'],
            'start_index': [0, 30],
            'end_index': [29, 59],
            'window_size': [30, 30],
            'best_seed': [17321, 28422],
            'max_net': [262.97, 90.22],
            'start_price': [26.6, 35.0],
            'end_price': [32.2, 26.2],
            'price_change_pct': [21.05, -25.14],
            'action_count': [13, 10],
            'action_sequence': ['[1, 1, 0, 1, ...]', '[1, 0, 0, 0, ...]']
        }
        st.dataframe(pd.DataFrame(sample_data))


if __name__ == "__main__":
    professional_dashboard()

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
import io
import ast # ‡πÄ‡∏û‡∏¥‡πà‡∏° import ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á string ‡πÄ‡∏õ‡πá‡∏ô list

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ statsmodels ‡∏ñ‡∏π‡∏Å‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£)
try:
    import statsmodels.api as sm
    STATSMODELS_AVAILABLE = True
except ImportError:
    STATSMODELS_AVAILABLE = False

# ===================================================================
# Dummy Functions (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏£‡∏±‡∏ô‡πÑ‡∏î‡πâ)
# ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡πÉ‡∏´‡πâ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô back-end ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
# ===================================================================
def Limit_fx(Ticker, act=-1, n_points=1000):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô
    """
    np.random.seed(42) # ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ô
    price = 100 + np.random.randn(n_points).cumsum()
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á net profit ‡∏à‡∏≥‡∏•‡∏≠‡∏á
    if act == -1: # min_net
        net = (price - price[0]) + np.random.randn(n_points) * 5
    elif act == -2: # max_net
        net = (price - price[0]) + np.abs(np.random.randn(n_points).cumsum()) * 2
    else:
        net = np.zeros(n_points)
        
    return pd.DataFrame({'price': price, 'net': net})

def calculate_optimized(actions, prices):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏Å‡∏≤‡∏£ backtest
    """
    n = len(prices)
    initial_capital = 10000
    sumusd = np.zeros(n)
    refer = (prices - prices[0]) * (initial_capital / prices[0]) # Buy and Hold
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏π‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•
    # ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏∞‡∏Ç‡∏∂‡πâ‡∏ô‡πÜ ‡∏•‡∏á‡πÜ ‡∏ï‡∏≤‡∏° actions ‡πÅ‡∏•‡∏∞ price
    simulated_profit = np.cumsum((actions - 0.5) * np.diff(prices, prepend=prices[0]) * 10)
    sumusd = initial_capital + refer + simulated_profit
    
    buffer = np.random.rand(n)
    cash = np.random.rand(n) * initial_capital
    asset_value = sumusd - cash
    amount = np.random.rand(n) * 100

    return buffer, sumusd, cash, asset_value, amount, refer

# ===================================================================
# ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á Dummy Functions
# ===================================================================

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ò‡∏µ‡∏°‡∏Ç‡∏≠‡∏á Plotly ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô
px.defaults.template = "plotly_white"

def advanced_analytics_dashboard():
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Advanced Analytics Dashboard
    """
    st.set_page_config(layout="wide", page_title="Advanced Backtest Analytics")

    st.title("üöÄ Advanced Backtest Analytics Dashboard")
    st.markdown("""
    Dashboard ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£ Backtest ‡πÉ‡∏ô‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å 
    ‡πÇ‡∏î‡∏¢‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Insights ‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏ó‡∏≤‡∏á Data Science ‡πÅ‡∏•‡∏∞ Data Visualization
    """)

    uploaded_file = st.file_uploader(
        "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå 'best_seed' ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
        type=['csv']
    )

    if uploaded_file is None:
        st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
        return

    try:
        # ‡πÉ‡∏ä‡πâ session state ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö df ‡πÑ‡∏ß‡πâ ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏•‡∏±‡∏ö‡πÅ‡∏ó‡πá‡∏ö
        if 'main_df' not in st.session_state or st.session_state.uploader_key != uploaded_file.name:
            df = pd.read_csv(uploaded_file)
            df['result'] = np.where(df['max_net'] > 0, 'Win', 'Loss')
            df['result_color'] = df['result'].apply(lambda x: '#2ca02c' if x == 'Win' else '#d62728')
            st.session_state.main_df = df
            st.session_state.uploader_key = uploaded_file.name
        
        df = st.session_state.main_df

        gross_profit = df[df['max_net'] > 0]['max_net'].sum()
        gross_loss = abs(df[df['max_net'] < 0]['max_net'].sum())
        profit_factor = gross_profit / gross_loss if gross_loss > 0 else np.inf
        total_net_profit = df['max_net'].sum()
        winning_windows = df[df['result'] == 'Win'].shape[0]
        total_windows = df.shape[0]
        win_rate = (winning_windows / total_windows) * 100 if total_windows > 0 else 0
        avg_win = df[df['result'] == 'Win']['max_net'].mean()
        avg_loss = df[df['result'] == 'Loss']['max_net'].mean()
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå: {e}")
        return

    st.success(f"‡πÑ‡∏ü‡∏•‡πå '{uploaded_file.name}' ‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {total_windows} windows")

    overview_tab, stitched_dna_tab = st.tabs(["üìä ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡πÅ‡∏•‡∏∞‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏£‡∏≤‡∏¢ Window", "üß¨ Stitched DNA Analysis"])
    
    with overview_tab:
        st.header("üî¨ ‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢ Window")
        selected_window = st.selectbox(
            '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Window ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:',
            options=df['window_number'],
            format_func=lambda x: f"Window #{x} (Timeline: {df.loc[df['window_number'] == x, 'timeline'].iloc[0]})"
        )
        if selected_window:
            window_data = df[df['window_number'] == selected_window].iloc[0]
            st.subheader(f"‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á Window #{selected_window}")
            
            w_cols = st.columns(3)
            w_cols[0].metric("Net Profit", f"{window_data['max_net']:.2f}")
            w_cols[0].metric("Price Change", f"{window_data['price_change_pct']:.2f}%")
            w_cols[1].metric("Start Price", f"{window_data['start_price']:.2f}")
            w_cols[1].metric("End Price", f"{window_data['end_price']:.2f}")
            w_cols[2].metric("Best Seed", f"{window_data['best_seed']}")
            w_cols[2].metric("Action Count", f"{window_data['action_count']}")

            st.markdown(f"**Action Sequence:**")
            st.code(window_data['action_sequence'], language='json')
            
            st.markdown("**‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Window ‡∏ô‡∏µ‡πâ:**")
            st.dataframe(window_data.to_frame().T.set_index('window_number'))

    # ===================================================================
    # ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ó‡πá‡∏ö Stitched DNA (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏ß‡∏°‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á)
    # ===================================================================
    with stitched_dna_tab:
        st.header("Stitched DNA Analysis")
        st.markdown("‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£ '‡πÄ‡∏¢‡πá‡∏ö' DNA (best seeds) ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ window ‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô")
        st.info("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Best Seed ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏î‡∏∂‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")

        # --- Input Section ---
        col1, col2 = st.columns(2)
        with col1:
            ticker_for_stitching = st.selectbox(
                "1. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Ticker ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢",
                ['FFWM', 'NEGG', 'RIVN', 'APLS', 'NVTS', 'QXO', 'RXRX'],
                key='stitched_ticker_upload'
            )
        with col2:
            window_size_from_file = st.number_input("2. Window Size (‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå)", value=30, key='window_upload')

        # Text area ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç seed list
        if 'seed_list_from_file' not in st.session_state:
            st.session_state.seed_list_from_file = "[]" # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ list ‡∏ß‡πà‡∏≤‡∏á

        # ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• seed ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
        if st.button("3. ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ Best Seeds ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î"):
            if 'best_seed' in df.columns:
                extracted_seeds = df['best_seed'].tolist()
                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô text area ‡πÅ‡∏•‡∏∞ session_state
                st.session_state.seed_list_from_file = str(extracted_seeds)
                st.success(f"‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {len(extracted_seeds)} seeds ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
            else:
                st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'best_seed' ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î")

        seed_list_input = st.text_area(
            "4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç DNA Seed List:",
            value=st.session_state.seed_list_from_file,
            height=150,
            key='seed_list_area',
            help="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç list ‡∏Ç‡∏≠‡∏á seed ‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Python list ‡πÄ‡∏ä‡πà‡∏ô [1, 2, 3]"
        )

        if st.button(f"5. ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Stitched DNA ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {ticker_for_stitching}"):
            try:
                # ‡πÉ‡∏ä‡πâ ast.literal_eval ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏•‡∏á string ‡∏à‡∏≤‡∏Å text area ‡πÄ‡∏õ‡πá‡∏ô list ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
                seeds_for_ticker = ast.literal_eval(seed_list_input)
                
                if not isinstance(seeds_for_ticker, list):
                    st.error("‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Text Area ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Python list ‡πÄ‡∏ä‡πà‡∏ô `[1, 2, 3]`")
                elif not seeds_for_ticker:
                    st.warning("Seed List ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤ Seed ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
                else:
                    with st.spinner(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå {ticker_for_stitching}..."):
                        # 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÉ‡∏ä‡πâ Dummy Function)
                        full_data_df = Limit_fx(Ticker=ticker_for_stitching, act=-1)
                        prices = full_data_df['price'].values
                        n_total = len(prices)

                        if n_total == 0:
                            st.error(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {ticker_for_stitching}")
                        else:
                            # 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á Stitched Action Sequence
                            final_actions = []
                            seed_index = 0
                            
                            for i in range(0, n_total, window_size_from_file):
                                current_window_size = min(window_size_from_file, n_total - i)
                                
                                if seed_index >= len(seeds_for_ticker):
                                    st.warning(f"Seed ‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà window {seed_index + 1} ‡∏à‡∏∞‡πÉ‡∏ä‡πâ Seed ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ ({seeds_for_ticker[-1]}) ‡∏ï‡πà‡∏≠‡πÑ‡∏õ")
                                    current_seed = seeds_for_ticker[-1]
                                else:
                                    current_seed = seeds_for_ticker[seed_index]

                                rng = np.random.default_rng(current_seed)
                                actions_for_window = rng.integers(0, 2, current_window_size)
                                if len(actions_for_window) > 0:
                                    actions_for_window[0] = 1 # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ action ‡πÅ‡∏£‡∏Å‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏™‡∏°‡∏≠
                                
                                final_actions.extend(actions_for_window)
                                seed_index += 1

                            stitched_actions = np.array(final_actions, dtype=np.int32)[:n_total]

                            # 3. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (‡πÉ‡∏ä‡πâ Dummy Function)
                            min_net = full_data_df['net']
                            max_net = Limit_fx(Ticker=ticker_for_stitching, act=-2)['net']
                            buffer, sumusd, cash, asset_value, amount, refer = calculate_optimized(stitched_actions, prices)
                            initial_capital = sumusd[0]
                            stitched_net = np.round(sumusd - refer - initial_capital, 2)
                            
                            # 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏•‡πá‡∏≠‡∏ï‡∏Å‡∏£‡∏≤‡∏ü
                            plot_df = pd.DataFrame({
                                'min_net (benchmark)': min_net.values,
                                'max_net (benchmark)': max_net.values,
                                'stitched_dna_net': stitched_net
                            }, index=full_data_df.index)

                            # 5. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
                            st.subheader("Performance Comparison (Net Profit)")
                            st.line_chart(plot_df)

                            with st.expander("‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (Data)"):
                                st.dataframe(plot_df.round(2))
                            with st.expander("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á Seed ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ"):
                                st.write("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Seed ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:", len(seeds_for_ticker))
                                st.write("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Window ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á:", seed_index)
                                st.dataframe({'used_seeds': seeds_for_ticker})
            
            except (ValueError, SyntaxError) as e:
                st.error(f"‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Text Area ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {e}. ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Python list ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÄ‡∏ä‡πà‡∏ô `[28834, 1408, 9009]`")
            except Exception as e:
                st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î: {e}")
                st.exception(e)

if __name__ == "__main__":
    advanced_analytics_dashboard()

with stitched_dna_tab:
    st.subheader("‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏à‡∏≤‡∏Å 'Stitched' DNA")
    st.markdown("‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏à‡∏£‡∏¥‡∏á‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ `best_seed` ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞ Window ‡∏°‡∏≤ '‡πÄ‡∏¢‡πá‡∏ö' ‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö Benchmark (Min/Max Performance)")

    # Auto-populate seeds from the loaded data
    if 'best_seed' in df.columns:
        extracted_seeds = df.sort_values('window_number')['best_seed'].tolist()
        st.session_state.seed_list_from_file = str(extracted_seeds)
    
    seed_list_input = st.text_area(
        "DNA Seed List (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ):",
        value=st.session_state.seed_list_from_file,
        height=100,
        help="‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ seed ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏•‡∏≠‡∏á"
    )

    dna_cols = st.columns(2)
    stitch_ticker = dna_cols[0].text_input("Ticker ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏•‡∏≠‡∏á", value=st.session_state.get('gen_ticker', 'FFWM'))
    stitch_start_date = dna_cols[1].date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≥‡∏•‡∏≠‡∏á", value=st.session_state.get('gen_start', datetime(2023, 1, 1)))

    if st.button("üß¨ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Stitched DNA ‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö", type="primary"):
        try:
            seeds_for_ticker = ast.literal_eval(seed_list_input)
            if not isinstance(seeds_for_ticker, list) or not seeds_for_ticker:
                st.error("‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Seed List ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô List ‡∏ß‡πà‡∏≤‡∏á")
            else:
                with st.spinner(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {stitch_ticker} ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Benchmark..."):
                    # 1. Fetch full price data for simulation
                    sim_data = get_ticker_data(stitch_ticker, str(stitch_start_date), str(datetime.now()))
                    if sim_data.empty:
                        st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÑ‡∏î‡πâ")
                    else:
                        prices = sim_data['Close'].tolist()
                        n_total = len(prices)
                        
                        # --- 2. Calculate for all 3 scenarios ---

                        # a) Stitched DNA
                        window_size_sim = int(n_total / len(seeds_for_ticker)) if len(seeds_for_ticker) > 0 else 30
                        final_actions, seed_index = [], 0
                        for i in range(0, n_total, window_size_sim):
                            current_seed = seeds_for_ticker[min(seed_index, len(seeds_for_ticker)-1)]
                            rng = np.random.default_rng(current_seed)
                            win_len = min(window_size_sim, n_total - i)
                            if win_len > 0:
                                actions_for_window = rng.integers(0, 2, win_len).tolist()
                                if actions_for_window:
                                    actions_for_window[0] = 1
                                final_actions.extend(actions_for_window)
                            seed_index += 1
                        
                        _, sumusd_dna, _, _, _, refer_dna = calculate_optimized(final_actions, prices)
                        stitched_net = sumusd_dna - refer_dna - sumusd_dna[0]

                        # b) Max Performance (Perfect Foresight)
                        max_actions = get_max_action_vectorized(prices)
                        _, sumusd_max, _, _, _, refer_max = calculate_optimized(max_actions, prices)
                        max_net = sumusd_max - refer_max - sumusd_max[0]

                        # c) Min Performance (Buy & Hold) -> Net profit is 0 by definition
                        min_net = np.zeros(n_total)
                        
                        # --- 3. Plotting ---
                        plot_df = pd.DataFrame({
                            'Max Performance (Perfect)': max_net,
                            'Stitched DNA Strategy': stitched_net,
                            'Min Performance (Buy & Hold)': min_net
                        }, index=sim_data.index)
                        
                        st.subheader("Performance Comparison (Net Profit)")
                        st.line_chart(plot_df)

                        # --- 4. Metrics ---
                        st.subheader("‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ (Final Net Profit)")
                        metric_cols = st.columns(3)
                        metric_cols[0].metric("Max Performance", f"${max_net[-1]:,.2f}", help="‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ï‡∏≤‡∏°‡∏ó‡∏§‡∏©‡∏é‡∏µ (Perfect Foresight)")
                        metric_cols[1].metric("Stitched DNA Strategy", f"${stitched_net[-1]:,.2f}", delta=f"{stitched_net[-1]:,.2f}", delta_color="normal")
                        metric_cols[2].metric("Buy & Hold", f"${min_net[-1]:,.2f}", help="‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå Buy and Hold (‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ê‡∏≤‡∏ô)")

        except Exception as e:
            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: {e}")
            st.exception(e) # ‡πÅ‡∏™‡∏î‡∏á traceback ‡πÄ‡∏û‡∏∑‡πà‡∏≠ debug

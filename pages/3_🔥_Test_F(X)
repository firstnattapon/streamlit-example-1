# #main
# import pandas as pd
# import numpy as np
# import yfinance as yf
# import streamlit as st
# import thingspeak
# import json
# import streamlit.components.v1 as components
# from typing import Dict, Any, Tuple, List
# import io

# # --- Helper function to load data from the provided text blocks ---
# def load_data_from_text():
#     """
#     Parses the provided multi-line strings for CSV and JSON data.
#     This simulates reading from files for the purpose of this script.
#     """
#     csv_data = """created_at,entry_id,field1,field2,field3,field4,latitude,longitude,elevation,status
# 2025-06-18T13:55:20+07:00,1,1084.45593,0.1008796214,3350.7,9665.54407,,,,
# 2025-06-18T19:48:40+07:00,2,1145.355927,0.1065447374,3350.7,9604.644073,,,,
# 2025-06-19T09:21:11+07:00,3,1617.813034,0.1504942358,2163.05,9132.186966,,,,
# 2025-06-20T15:33:00+07:00,4,1675.783034,0.1558867939,3370.02,9074.216966,,,,
# 2025-06-21T11:22:43+07:00,5,1659.254155,0.1543492237,3393.52,9090.745845,,,,
# 2025-06-24T11:49:28+07:00,6,1803.182433,0.1677379007,3154.85,8946.817567,,,,
# 2025-06-25T10:28:04+07:00,7,1589.906662,0.1478982941,3867.93,9160.093338,,,,
# 2025-06-26T10:15:52+07:00,8,1587.570658,0.1476809914,3808.84,9162.429342,,,,
# 2025-06-27T09:38:13+07:00,9,1481.492736,0.1378132778,3760.06,9268.507264,,,,
# 2025-06-28T12:39:03+07:00,10,1560.246488,0.1451392082,3599.54,9189.753512,,,,
# 2025-07-01T11:48:59+07:00,11,1432.963209,0.1332989031,3939.4,9317.036791,,,,
# 2025-07-02T11:17:13+07:00,12,1432.090838,0.1332177524,4134.25,9317.909162,,,,
# 2025-07-03T11:47:10+07:00,13,1319.270776,0.1227228629,2964.15,9430.729224,,,,
# 2025-07-04T10:23:29+07:00,14,1297.111651,0.1206615489,3134.57,9452.888349,,,,
# """
#     df = pd.read_csv(io.StringIO(csv_data))
    
#     json_data = """
# {
#     "baseline_target": 1085.00,
#     "log_pv_multiplier": 1500,
#     "cashflow_offset": -4250.00,
#     "cashflow_offset_comment": "Offset_Day1 as of 17/6/68",
#     "product_cost_default": 10750.00,
#     "thingspeak_channels": {
#         "main_output": {
#             "channel_id": 2394198,
#             "write_api_key": "OVZNYQBL57GJW5JF",
#             "fields": {
#                 "net_cf": "field1",
#                 "pure_alpha": "field2",
#                 "buffer": "field3",
#                 "cost_minus_cf": "field4"
#             }
#         }
#     },
#     "assets": [
#         {"type": "option","name": "FFWM Call @ 6.88","underlying_ticker": "FFWM","contracts_or_shares": 200,"premium_paid_per_share": 1.17,"strike": 5.0},
#         {"type": "option","name": "AGL Call @ 3.0","underlying_ticker": "AGL","contracts_or_shares": 500,"premium_paid_per_share": 0.538,"strike": 2.5},
#         {"type": "option","name": "RXRX Call @ 5.40","underlying_ticker": "RXRX","contracts_or_shares": 200,"premium_paid_per_share": 1.4,"strike": 4.0},
#         {"type": "option","name": "FLNC Call @ 7.00","underlying_ticker": "FLNC","contracts_or_shares": 100,"premium_paid_per_share": 0.98,"strike": 6.0},
#         {"type": "option","name": "GERN Call @ 1.85","underlying_ticker": "GERN","contracts_or_shares": 800,"premium_paid_per_share": 0.36,"strike": 1.5},
#         {"type": "stock","ticker": "FFWM","reference_price": 6.88,"holding_channel": {"channel_id": 2528199,"write_api_key": "2E65V8XEIPH9B2VV","field": "field1"}},
#         {"type": "stock","ticker": "NEGG","reference_price": 25.20,"holding_channel": {"channel_id": 2528199,"write_api_key": "2E65V8XEIPH9B2VV","field": "field2"}},
#         {"type": "stock","ticker": "RIVN","reference_price": 10.07,"holding_channel": {"channel_id": 2528199,"write_api_key": "2E65V8XEIPH9B2VV","field": "field3"}},
#         {"type": "stock","ticker": "APLS","reference_price": 39.61,"holding_channel": {"channel_id": 2528199,"write_api_key": "2E65V8XEIPH9B2VV","field": "field4"}},
#         {"type": "stock","ticker": "NVTS","reference_price": 3.05,"holding_channel": {"channel_id": 2528199,"write_api_key": "2E65V8XEIPH9B2VV","field": "field5"}},
#         {"type": "stock","ticker": "QXO","reference_price": 19.00,"holding_channel": {"channel_id": 2528199,"write_api_key": "2E65V8XEIPH9B2VV","field": "field6"}},
#         {"type": "stock","ticker": "RXRX","reference_price": 5.40,"holding_channel": {"channel_id": 2528199,"write_api_key": "2E65V8XEIPH9B2VV","field": "field7"}},
#         {"type": "stock","ticker": "AGL","reference_price": 3.00,"holding_channel": {"channel_id": 2528199,"write_api_key": "2E65V8XEIPH9B2VV","field": "field8"}},
#         {"type": "stock","ticker": "FLNC","reference_price": 7.00,"holding_channel": {"channel_id": 2988802,"write_api_key": "85IOR3R3ZG643PBP","field": "field1"}},
#         {"type": "stock","ticker": "GERN","reference_price": 1.85,"holding_channel": {"channel_id": 2988802,"write_api_key": "85IOR3R3ZG643PBP","field": "field2"}}
#     ]
# }
# """
#     config = json.loads(json_data)
#     return df, config

# # --- Page Configuration ---
# st.set_page_config(page_title="Project IRR/NPV Calculator", page_icon="üöÄ", layout= "wide" )

# # --- 1. CONFIGURATION & INITIALIZATION FUNCTIONS ---

# # Since the config is provided directly, we'll use a function that returns it.
# @st.cache_data
# def load_config() -> Dict[str, Any]:
#     """Loads and parses the JSON configuration from the text block."""
#     try:
#         _, config = load_data_from_text()
#         return config
#     except (FileNotFoundError, json.JSONDecodeError) as e:
#         st.error(f"Error loading or parsing config data: {e}")
#         st.stop()
        
# # This function is retained for structure, but since we can't make live calls,
# # it will be mocked or will show a success message.
# @st.cache_resource
# def initialize_thingspeak_clients(config: Dict[str, Any], stock_assets: List[Dict[str, Any]], option_assets: List[Dict[str, Any]]) -> Tuple[None, Dict[str, None]]:
#     """Simulates initializing ThingSpeak clients."""
#     st.info("ThingSpeak client initialization is simulated in this environment.")
#     num_asset_clients = len([asset for asset in stock_assets if asset.get('holding_channel', {}).get('channel_id')])
#     num_option_assets = len(option_assets)
#     st.success(f"Simulated initialization for main client, {num_asset_clients} asset holding clients, and {num_option_assets} option assets.")
#     return None, {} # Return dummy values

# def fetch_initial_data(stock_assets: List[Dict[str, Any]], option_assets: List[Dict[str, Any]], asset_clients: Dict[str, thingspeak.Channel]) -> Dict[str, Dict[str, Any]]:
#     """Fetches initial prices from yfinance and simulates fetching last holdings."""
#     initial_data = {}
#     tickers_to_fetch = {asset['ticker'].strip() for asset in stock_assets}
#     tickers_to_fetch.update({opt.get('underlying_ticker').strip() for opt in option_assets if opt.get('underlying_ticker')})

#     st.write("Fetching live prices from Yahoo Finance...")
#     progress_bar = st.progress(0)
#     for i, ticker in enumerate(tickers_to_fetch):
#         initial_data[ticker] = {}
#         try:
#             # Use yfinance to get the last price
#             last_price = yf.Ticker(ticker).fast_info.get('lastPrice')
#             if last_price is None:
#                 raise ValueError("Price not found")
#             initial_data[ticker]['last_price'] = last_price
#         except Exception:
#             # Fallback to reference price from config
#             ref_price = next((a.get('reference_price', 0.0) for a in stock_assets if a['ticker'].strip() == ticker), 0.0)
#             initial_data[ticker]['last_price'] = ref_price
#             st.warning(f"Could not fetch live price for {ticker}. Defaulting to reference price: {ref_price}.")
#         progress_bar.progress((i + 1) / len(tickers_to_fetch))
#     progress_bar.empty()

#     # Simulate fetching holdings
#     for asset in stock_assets:
#         ticker = asset["ticker"].strip()
#         # In a real scenario, this would be fetched. Here we default to 0.
#         initial_data[ticker]['last_holding'] = 0.0
#         st.info(f"Holding for {ticker} is initialized to 0. Please enter the current amount.", icon="‚ÑπÔ∏è")
        
#     return initial_data
    
# # --- 2. CORE LOGIC & CALCULATION FUNCTIONS ---

# def calculate_irr_npv(cash_flows):
#     """
#     Calculates IRR and NPV for a series of cash flows.
#     Assumes the first cash flow is the initial investment (negative).
#     """
#     if len(cash_flows) < 2:
#         return None, None, "Not enough data points for calculation."

#     try:
#         # Use a sample discount rate of 10% for NPV
#         discount_rate = 0.10
#         npv = np.npv(discount_rate, cash_flows)
#         irr = np.irr(cash_flows)
#         # Convert IRR to percentage
#         irr_percent = irr * 100 if irr is not None else None
#         return npv, irr_percent, None
#     except Exception as e:
#         return None, None, f"Error during calculation: {e}"

# def calculate_project_metrics(stock_assets: List[Dict[str, Any]], option_assets: List[Dict[str, Any]], user_inputs: Dict[str, Any], config: Dict[str, Any]) -> Tuple[Dict[str, float], float, float]:
#     """Calculates all core financial metrics based on user inputs and config."""
#     metrics = {}
#     total_stock_value = user_inputs['total_stock_value']
#     portfolio_cash = user_inputs['portfolio_cash']
#     current_prices = user_inputs['current_prices']

#     # --- Options Calculation ---
#     total_options_pl = 0.0
#     total_option_cost = 0.0
#     for option in option_assets:
#         underlying_ticker = option.get("underlying_ticker", "").strip()
#         if not underlying_ticker: continue

#         last_price = current_prices.get(underlying_ticker, 0.0)
#         strike = option.get("strike", 0.0)
#         contracts = option.get("contracts_or_shares", 0.0)
#         premium = option.get("premium_paid_per_share", 0.0)
        
#         # Total cost basis for this option position
#         cost_basis = contracts * premium
#         total_option_cost += cost_basis
        
#         # Intrinsic value is the value if exercised now
#         intrinsic_value_per_share = max(0, last_price - strike)
#         total_intrinsic_value = intrinsic_value_per_share * contracts
        
#         # Unrealized P/L is the current value minus what you paid
#         unrealized_pl = total_intrinsic_value - cost_basis
#         total_options_pl += unrealized_pl

#     # --- Main Project Metrics Calculation ---
#     # This value represents the portfolio's liquidation value minus the upfront cost of options
#     metrics['now_pv'] = total_stock_value + portfolio_cash - total_option_cost

#     log_pv_multiplier = config.get('log_pv_multiplier', 1500)
    
#     # Filter for assets with valid prices to avoid errors with np.prod
#     valid_stock_assets = [asset for asset in stock_assets if current_prices.get(asset['ticker'].strip()) is not None]
    
#     reference_prices = [asset['reference_price'] for asset in valid_stock_assets]
#     live_prices = [current_prices[asset['ticker'].strip()] for asset in valid_stock_assets]

#     metrics['t_0'] = np.prod(reference_prices) if reference_prices else 0
#     metrics['t_n'] = np.prod(live_prices) if live_prices else 0
#     t_0, t_n = metrics['t_0'], metrics['t_n']
    
#     metrics['ln'] = -log_pv_multiplier * np.log(t_0 / t_n) if t_0 > 0 and t_n > 0 else 0
    
#     number_of_assets = len(valid_stock_assets)
#     metrics['log_pv'] = (number_of_assets * log_pv_multiplier) + metrics['ln']
#     metrics['net_cf'] = metrics['now_pv'] - metrics['log_pv']
    
#     return metrics, total_options_pl, total_option_cost

# # --- 3. UI & DISPLAY FUNCTIONS ---
# def render_ui_and_get_inputs(stock_assets: List[Dict[str, Any]], option_assets: List[Dict[str, Any]], initial_data: Dict[str, Dict[str, Any]], product_cost_default: float) -> Dict[str, Any]:
#     """Renders all UI components and collects user inputs into a dictionary."""
#     user_inputs = {}
    
#     with st.container(border=True):
#         st.subheader("‚öôÔ∏è Calculation Parameters")
#         col1, col2 = st.columns(2)
#         user_inputs['product_cost'] = col1.number_input('Product Cost (‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£)', value=product_cost_default, format="%.2f")
#         user_inputs['portfolio_cash'] = col2.number_input('Portfolio Cash (‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡πÉ‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï)', value=0.00, format="%.2f")

#     st.divider()
    
#     col1, col2 = st.columns(2)

#     with col1:
#         with st.container(border=True):
#             st.subheader("üìä Asset Prices (Live)")
#             current_prices = {}
#             all_tickers = sorted(list(initial_data.keys()))
#             for ticker in all_tickers:
#                 price_value = initial_data.get(ticker, {}).get('last_price', 0.0)
#                 current_prices[ticker] = st.number_input(f"‡∏£‡∏≤‡∏Ñ‡∏≤ {ticker}", value=price_value, key=f"price_{ticker}", format="%.2f")
#             user_inputs['current_prices'] = current_prices

#     with col2:
#         with st.container(border=True):
#             st.subheader("üì¶ Stock Holdings")
#             current_holdings = {}
#             total_stock_value = 0.0
#             for asset in stock_assets:
#                 ticker = asset["ticker"].strip()
#                 holding_value = initial_data.get(ticker, {}).get('last_holding', 0.0)
#                 asset_holding = st.number_input(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏∏‡πâ‡∏ô {ticker}", value=holding_value, key=f"holding_{ticker}", format="%.2f")
#                 current_holdings[ticker] = asset_holding
#                 individual_asset_value = asset_holding * current_prices.get(ticker, 0.0)
#                 st.write(f"‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤ {ticker}: **${individual_asset_value:,.2f}**")
#                 total_stock_value += individual_asset_value
#             st.metric("Total Stock Value (‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏´‡∏∏‡πâ‡∏ô‡∏£‡∏ß‡∏°)", f"${total_stock_value:,.2f}")
#             user_inputs['current_holdings'] = current_holdings
#             user_inputs['total_stock_value'] = total_stock_value

#     return user_inputs

# def display_results(metrics: Dict[str, float], options_pl: float, total_option_cost: float, config: Dict[str, Any], user_inputs: Dict[str, Any]):
#     """Displays all calculated metrics in the Streamlit app."""
#     st.divider()
#     st.header("üìà Project Calculation Results")
    
#     with st.container(border=True):
#         st.subheader("Core Project Metrics")
        
#         # The main value is (Stocks + Cash - Max_Roll_Over), while current P/L is shown for context
#         st.metric(
#             label=f"Current Portfolio Value (Stocks + Cash) - Option Cost | Current Option P/L",
#             value=f"${metrics['now_pv']:,.2f}",
#             help=f"‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å: (‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏´‡∏∏‡πâ‡∏ô‡∏£‡∏ß‡∏° ${user_inputs['total_stock_value']:,.2f} + ‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î ${user_inputs['portfolio_cash']:,.2f}) - ‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô Options ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${total_option_cost:,.2f}. "
#                  f"‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏Ç‡∏≠‡∏á Options ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠ ${options_pl:,.2f}."
#         )

#         col1, col2 = st.columns(2)
#         col1.metric('t_0 (Product of Stock Reference Prices)', f"{metrics['t_0']:,.2f}")
#         col2.metric('t_n (Product of Stock Live Prices)', f"{metrics['t_n']:,.2f}")
        
#         st.metric('`ln` Component (Price Change Factor)', f"{metrics['ln']:,.2f}", 
#                   help=f"Calculated as -{config.get('log_pv_multiplier')} * ln({metrics['t_0']:,.2f} / {metrics['t_n']:,.2f})")
        
#         st.metric(f"`Log PV` (Baseline Value)", f"${metrics['log_pv']:,.2f}",
#                   help=f"Calculated as (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏∏‡πâ‡∏ô x {config.get('log_pv_multiplier')}) + `ln` Component")
        
#         st.metric(label="üí∞ Net Cashflow (Calculated)", value=f"${metrics['net_cf']:,.2f}",
#                   help="`Current Portfolio Value` - `Log PV`")

#         st.subheader("Performance vs Target")
#         offset_display_val = -config.get('cashflow_offset', 0.0)
#         product_cost = user_inputs['product_cost']
#         baseline_label = f"Adjusted CF (‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö Offset {offset_display_val:,.0f} ‡∏ì {config.get('cashflow_offset_comment', '')})"
#         adjusted_cf = metrics['net_cf'] - config.get('cashflow_offset', 0.0)
#         st.metric(label=baseline_label, value=f"${adjusted_cf:,.2f}")
        
#         baseline_target = config.get('baseline_target', 0.0)
#         final_value = adjusted_cf - baseline_target
#         st.metric(label=f"Net Performance vs Target ({baseline_target:,.2f})", value=f"${final_value:,.2f}", delta=f"{final_value:,.2f}")


# def display_historical_analysis(df: pd.DataFrame):
#     """Analyzes the historical data from feeds.csv."""
#     st.divider()
#     st.header("üìâ Historical Analysis (from feeds.csv)")
#     with st.container(border=True):
#         st.write("This section analyzes the historical cash flow data provided in `feeds.csv`.")
        
#         # Assuming field1 is the net cash flow for each period
#         cash_flows = df['field1'].dropna().tolist()

#         # For IRR/NPV, the first flow is often an investment. We'll use the 'product_cost_default'.
#         _, config = load_data_from_text()
#         initial_investment = -config.get('product_cost_default', 10750.00)
        
#         # Prepend the initial investment to the series of cash flows
#         full_cash_flow_series = [initial_investment] + cash_flows
        
#         npv, irr, error = calculate_irr_npv(full_cash_flow_series)
        
#         if error:
#             st.error(error)
#         else:
#             col1, col2 = st.columns(2)
#             col1.metric("Net Present Value (NPV)", f"${npv:,.2f}", help="Calculated with a 10% discount rate.")
#             col2.metric("Internal Rate of Return (IRR)", f"{irr:.2f}%")

#         st.write("Cash Flow Series Used for Calculation (Investment + Field1 values):")
#         st.dataframe(pd.Series(full_cash_flow_series, name="Cash Flows"), use_container_width=True)
        
#         st.line_chart(df.rename(columns={'created_at': 'index'}).set_index('index')['field1'])

# # --- 4. MAIN APPLICATION FLOW ---
# def main():
#     """Main function to run the Streamlit application."""
#     st.title("Financial Project Dashboard")
#     st.write("This dashboard calculates project-specific metrics based on live market data and provides a historical IRR/NPV analysis based on the provided `feeds.csv` data.")

#     # Load all data and configs
#     historical_df, config = load_data_from_text()
#     if not config: return

#     all_assets = config.get('assets', [])
#     stock_assets = [item for item in all_assets if item.get('type', 'stock') == 'stock']
#     option_assets = [item for item in all_assets if item.get('type') == 'option']

#     # --- Tabbed Interface ---
#     tab1, tab2 = st.tabs(["Live Project Calculator", "Historical IRR/NPV Analysis"])

#     with tab1:
#         # Initialize clients and fetch live data
#         clients = initialize_thingspeak_clients(config, stock_assets, option_assets)
#         initial_data = fetch_initial_data(stock_assets, option_assets, clients[1]) # clients[1] is asset_clients
        
#         # Render the UI to get user inputs
#         user_inputs = render_ui_and_get_inputs(
#             stock_assets,
#             option_assets,
#             initial_data,
#             config.get('product_cost_default', 0.0)
#         )

#         # A button to trigger recalculation is good practice
#         if st.button("Calculate / Refresh Metrics", type="primary"):
#             # Recalculate and display results
#             metrics, options_pl, total_option_cost = calculate_project_metrics(stock_assets, option_assets, user_inputs, config)
#             display_results(metrics, options_pl, total_option_cost, config, user_inputs)
#             st.success("Metrics updated!")
#         else:
#             # Calculate and display on first run
#             metrics, options_pl, total_option_cost = calculate_project_metrics(stock_assets, option_assets, user_inputs, config)
#             display_results(metrics, options_pl, total_option_cost, config, user_inputs)

#     with tab2:
#         # Display the historical analysis
#         display_historical_analysis(historical_df)


# if __name__ == "__main__":
#     main()

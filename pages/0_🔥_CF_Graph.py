import streamlit as st
import json
import yfinance as yf
import re

st.set_page_config(page_title="CF_Graph", page_icon="üî•", layout="wide")

try:
    with open("cf_graph_config.json", "r", encoding="utf-8") as f:
        assets_config = json.load(f)
except FileNotFoundError:
    st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå 'cf_graph_config.json'. ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Asset ‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà")
    st.stop()

tab_names = ["DATA", "BATA" , "All_Ticker" , "Option_Sum" , "Historical_Backtest_CF" , "Call_ratio_spread"]  
tabs = st.tabs(tab_names)

current_prices = {}
asset_params = {}

with tabs[1]:
    with st.expander("‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£ BATA", expanded=True):
        st.components.v1.iframe("https://monica.im/share/artifact?id=a3cRH7RVEHvBTjPhBC5Hd7", width=1500, height=1000, scrolling=0)
    with st.expander("‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£ Rollover"):
        st.components.v1.iframe("https://monica.im/share/artifact?id=E9Mg5JX9RaAcfssZsU7K3E", width=1500, height=1000, scrolling=0)

with tabs[2]:
    with st.expander("All_Ticker", expanded=True):
        st.components.v1.iframe("https://monica.im/share/artifact?id=z6iWHpc2rQjTTMriGBbthi", width=1500, height=1000, scrolling=0)

with tabs[3]:
    with st.expander("Option_Sum", expanded=True):
        st.components.v1.iframe("https://monica.im/share/artifact?id=aYyGrPmCRG24qMZiB4872K", width=1500, height=1000, scrolling=0)

with tabs[4]:
    with st.expander("Historical_Backtest_CF", expanded=True):
        st.components.v1.iframe("https://monica.im/share/artifact?id=DioBCRhLKWgMw2ey5YMRKJ", width=1500, height=1000, scrolling=0)
        with st.expander("Monthly", expanded=False):        
            st.components.v1.iframe("https://monica.im/share/artifact?id=cgYnircvQqM9YUf58VHd8a", width=1500, height=1000, scrolling=0)
        
with tabs[5]:
    with st.expander("3_piecewise_line", expanded=True):
        st.components.v1.iframe("https://monica.im/share/artifact?id=Y3MdBwfsaZRLxYyj9qZvGd", width=1500, height=1000, scrolling=0)
        with st.expander("3_piecewise_line_v1", expanded=False):
            st.components.v1.iframe("https://monica.im/share/artifact?id=t8qKXjs8Aywi3PcTf4pDZM", width=1500, height=1000, scrolling=0)

def parse_final_two_numbers(s):
    nums = re.findall(r"[-+]?\d*\.?\d+", str(s))
    a = float(nums[0]) if len(nums) > 0 else 0.0
    b = float(nums[1]) if len(nums) > 1 else 0.0
    return a, b

with tabs[0]:
    st.write("‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ Asset")

    with st.expander(f"pnl_tracking_strategy"):
        st.json({
        "pnl_tracking_strategy": {
        "description": "‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡πÑ‡∏£‡πÅ‡∏•‡∏∞‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô (P&L) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≠‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥",
        "components": [
          {
            "variable_name": "accumulated_realized_pnl",
            "description": "‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏™‡∏∞‡∏™‡∏°‡∏à‡∏≤‡∏Å‡∏≠‡∏î‡∏µ‡∏ï",
            "purpose": "‡πÄ‡∏Å‡πá‡∏ö‡∏¢‡∏≠‡∏î‡∏™‡∏∞‡∏™‡∏°‡∏à‡∏≤‡∏Å‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ô‡∏≥‡∏°‡∏≤‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô",
            "initial_value": -313.79
          },
          {
            "variable_name": "current_unrealized_pnl",
            "description": "‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏≠‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô",
            "purpose": "‡πÉ‡∏ä‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏≠‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÇ‡∏î‡∏¢‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡∏à‡∏≤‡∏Å 0",
            "formula": "5000 * ln(P / 20.0)",
            "note": "‡∏Ñ‡πà‡∏≤ P ‡∏Ñ‡∏∑‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (Price) ‡πÅ‡∏•‡∏∞ P&L ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô 0 ‡πÄ‡∏°‡∏∑‡πà‡∏≠ P = 20.0"
          },
          {
            "variable_name": "total_lifetime_pnl",
            "description": "‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô",
            "purpose": "‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
            "formula": "accumulated_realized_pnl + current_unrealized_pnl"
          }
        ],
        "summary": "‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö P&L ‡∏Ç‡∏≠‡∏á‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏®‡∏π‡∏ô‡∏¢‡πå‡πÄ‡∏™‡∏°‡∏≠ ‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏£‡∏≠‡∏ö‡πÄ‡∏Å‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏¢‡∏≠‡∏î‡∏™‡∏∞‡∏™‡∏°‡πÅ‡∏¢‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Ñ‡∏£‡∏±‡∏ö"
        }
        })
    
    st.write("---")
    for asset in assets_config:
        ticker = asset.get("ticker", "N/A")
        final_str = asset.get("Final", "N/A")
        with st.expander(f"‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥: {ticker} | \"{final_str}\""):
            try:
                final_price, final_fav = parse_final_two_numbers(final_str)
                asset_params[ticker] = {"entry": final_price, "fav": final_fav}
                try:
                    last_price = yf.Ticker(ticker).fast_info.get("lastPrice", final_price)
                except Exception:
                    st.warning(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á {ticker} ‡πÑ‡∏î‡πâ, ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤ Final ‡πÅ‡∏ó‡∏ô")
                    last_price = final_price
                current_prices[ticker] = st.number_input("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì)", step=0.01, value=float(last_price), key=f"price_{ticker}")
                st.write("---")
                st.write("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö‡∏à‡∏≤‡∏Å Config:")
                st.json(asset)
            except Exception as e:
                st.error(f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô config ‡∏Ç‡∏≠‡∏á {ticker} ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
                asset_params[ticker] = {"entry": 0.0, "fav": 0.0}
                current_prices[ticker] = 0.0

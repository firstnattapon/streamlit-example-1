import streamlit as st
import numpy as np
import pandas as pd
import yfinance as yf
import json
import plotly.express as px

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
st.set_page_config(page_title="CF_Graph", page_icon="üî•" , layout= "wide" )

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏£) ---
def CF_Graph(entry=1.26, ref=1.26, Fixed_Asset_Value=1500., Cash_Balan=650.):
    try:
        step = 0.01
        # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏£‡∏ì‡∏µ entry ‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
        if entry <= 0:
            return pd.DataFrame(), 0.0
            
        samples = np.arange(0, np.around(entry, 2) * 3 + step, step)

        df = pd.DataFrame()
        df['Asset_Price'] = np.around(samples, 2)
        # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢‡∏®‡∏π‡∏ô‡∏¢‡πå
        df = df[df['Asset_Price'] > 0]
        
        df['Fixed_Asset_Value'] = Fixed_Asset_Value
        df['Amount_Asset'] = df['Fixed_Asset_Value'] / df['Asset_Price']

        df_top = df[df.Asset_Price >= np.around(entry, 2)].copy()
        df_top['Cash_Balan_top'] = (df_top['Amount_Asset'].shift(1) - df_top['Amount_Asset']) * df_top['Asset_Price']
        df_top.fillna(0, inplace=True)
        np_Cash_Balan_top = df_top['Cash_Balan_top'].values

        xx = np.zeros(len(np_Cash_Balan_top))
        y_0 = Cash_Balan
        for idx, v_0 in enumerate(np_Cash_Balan_top):
            z_0 = y_0 + v_0
            y_0 = z_0
            xx[idx] = y_0

        df_top['Cash_Balan_top'] = xx
        df_top = df_top.rename(columns={'Cash_Balan_top': 'Cash_Balan'})
        df_top = df_top.sort_values(by='Amount_Asset')
        if not df_top.empty:
            df_top = df_top[:-1]

        df_down = df[df.Asset_Price <= np.around(entry, 2)].copy()
        df_down['Cash_Balan_down'] = (df_down['Amount_Asset'].shift(-1) - df_down['Amount_Asset']) * df_down['Asset_Price']
        df_down.fillna(0, inplace=True)
        df_down = df_down.sort_values(by='Asset_Price', ascending=False)
        np_Cash_Balan_down = df_down['Cash_Balan_down'].values

        xxx = np.zeros(len(np_Cash_Balan_down))
        y_1 = Cash_Balan
        for idx, v_1 in enumerate(np_Cash_Balan_down):
            z_1 = y_1 + v_1
            y_1 = z_1
            xxx[idx] = y_1

        df_down['Cash_Balan_down'] = xxx
        df_down = df_down.rename(columns={'Cash_Balan_down': 'Cash_Balan'})
        
        df_final = pd.concat([df_top, df_down], axis=0)
        df_final['net_pv'] = df_final['Fixed_Asset_Value'] + df_final['Cash_Balan']
        
        df_2 = df_final[df_final['Asset_Price'] == np.around(ref, 2)]['net_pv'].values
        
        # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ default ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
        result_pv = df_2[-1] if len(df_2) > 0 else 0.0
        
        return df_final[['Asset_Price', 'Cash_Balan', 'net_pv', 'Fixed_Asset_Value']], result_pv
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏£‡∏≤‡∏ü: {e}")
        return pd.DataFrame(), 0.0

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô ---

# 1. ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON
try:
    with open('cf_graph_config.json', 'r', encoding='utf-8') as f:
        assets_config = json.load(f)
except FileNotFoundError:
    st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå 'cf_graph_config.json'. ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Asset")
    st.stop() # ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå config

# 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠ Tab ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
tab_names = ['DATA'] +  ['BATA'] + [asset['ticker'] for asset in assets_config]  
tabs = st.tabs(tab_names)

# Dictionary ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å input
current_prices = {}
results_rf = {}
with tabs[1]:
    with st.expander("‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£ BATA" , expanded=True):
        st.components.v1.iframe("https://monica.im/share/artifact?id=sK3gfn5iVhqdVMEgTNWHdP", width=1500 , height=1000  , scrolling=0)
    with st.expander("‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£ Rollover"):
        st.components.v1.iframe("https://monica.im/share/artifact?id=E9Mg5JX9RaAcfssZsU7K3E", width=1500 , height=1000  , scrolling=0)

# 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á Tab "DATA" ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö Input
with tabs[0]:
    st.write("‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á")
    
    # Input ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á
    x_5 = st.number_input('Fixed_Asset_Value (‡∏ï‡πà‡∏≠‡∏ï‡∏±‡∏ß)', step=1.0, value=1500.)
    x_6 = st.number_input('Cash_Balan (‡∏ï‡πà‡∏≠‡∏ï‡∏±‡∏ß)', step=1.0, value=0.)
    st.write("---")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á input ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÅ‡∏ö‡∏ö‡∏ß‡∏ô‡∏•‡∏π‡∏õ
    st.write("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á)")
    for asset in assets_config:
        ticker = asset['ticker']
        entry_price = asset['entry_price']
        
        # --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ---
        # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ comment ‡∏à‡∏≤‡∏Å config, ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
        comment = asset.get('comment', '')
        
        try:
            # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å yfinance ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            last_price = yf.Ticker(ticker).fast_info.get('lastPrice', entry_price)
        except Exception:
            st.warning(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á {ticker} ‡πÑ‡∏î‡πâ, ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤ Entry ‡πÅ‡∏ó‡∏ô")
            last_price = entry_price
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á label ‡∏Ç‡∏≠‡∏á input ‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏° comment ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        label = f"‡∏£‡∏≤‡∏Ñ‡∏≤_{ticker} (Entry: {entry_price})"
        if comment:
            label += f" | roll {comment}"
        
        # ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏•‡∏á‡πÉ‡∏ô Dictionary
        current_prices[ticker] = st.number_input(
            label, 
            step=0.01, 
            value=float(last_price), 
            key=f"price_{ticker}"
        )
        # --- ‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ---
        
# 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á Tab ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ Asset ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ö‡∏ö‡∏ß‡∏ô‡∏•‡∏π‡∏õ        
for i, asset in enumerate(assets_config):
    with tabs[i + 2]: # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å tab ‡∏ó‡∏µ‡πà 1 (‡∏ñ‡∏±‡∏î‡∏à‡∏≤‡∏Å DATA)
        ticker = asset['ticker']
        entry_price = asset['entry_price']
        
        # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å Dictionary ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ
        ref_price = current_prices[ticker]

        st.write('')
        st.write(f"‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Ç‡∏≠‡∏á {ticker}")
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
        df, df_rf_value = CF_Graph(
            entry=entry_price, 
            ref=ref_price, 
            Fixed_Asset_Value=x_5, 
            Cash_Balan=x_6
        )
        
        # ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå net_pv ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏£‡∏ß‡∏°
        results_rf[ticker] = df_rf_value
        
        if not df.empty:
            # ‡∏û‡∏•‡πá‡∏≠‡∏ï‡∏Å‡∏£‡∏≤‡∏ü
            as_1 = df.set_index('Asset_Price')
            as_1_py = px.line(as_1, title=f"Analysis for {ticker}")

            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤ Entry ‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            as_1_py.add_vline(x=ref_price, line_width=1.5, line_dash="dash", line_color="red")
            as_1_py.add_vline(x=entry_price, line_width=1.5, line_dash="solid", line_color="green", opacity=0.6)

            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏Å‡∏ô Y ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            y_position = df['net_pv'].median() 

            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (Annotation)
            as_1_py.add_annotation(
                x=ref_price, y=y_position,
                text=f"Current: {ref_price:.2f}",
                showarrow=False,
                yshift=15, # ‡∏Ç‡∏¢‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
                font=dict(color="red", size=12),
                bgcolor="rgba(255, 255, 255, 0.6)"
            )
            as_1_py.add_annotation(
                x=entry_price, y=y_position,
                text=f"Entry: {entry_price:.2f}",
                showarrow=False,
                yshift=-15, # ‡∏Ç‡∏¢‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
                font=dict(color="green", size=12),
                bgcolor="rgba(255, 255, 255, 0.6)"
            )

            st.plotly_chart(as_1_py, use_container_width=True)
            
            st.metric(label=f"Net PV ‡∏Ç‡∏≠‡∏á {ticker} ‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", value=f"${df_rf_value:,.2f}")
            st.write("_____") 

        else:
            st.warning("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÑ‡∏î‡πâ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

# 5. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏ß‡∏° (‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å Dictionary)
st.write("_______")
st.header("‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏û‡∏≠‡∏£‡πå‡∏ï")

total_rf = sum(results_rf.values())
num_assets = len(assets_config)
total_fixed_asset_value = x_5 * num_assets
total_initial_cash = x_6 * num_assets

st.metric("‚úÖ SUM Net PV (‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á)", f"${total_rf:,.2f}")

col1, col2, col3 = st.columns(3)
col1.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Asset ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", f"{num_assets} ‡∏ï‡∏±‡∏ß")
col2.metric("‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤ Fixed Asset ‡∏£‡∏ß‡∏°", f"${total_fixed_asset_value:,.2f}")
col3.metric("‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏ß‡∏°", f"${total_initial_cash:,.2f}")

# ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÉ‡∏ô Expander ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
with st.expander("‡∏î‡∏π Net PV ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß"):
    for ticker, value in results_rf.items():
        st.write(f"{ticker}: ${value:,.2f}")



# app_advanced_fx.py
# -*- coding: utf-8 -*-
from __future__ import annotations
import math, json, io
from dataclasses import dataclass
from typing import Dict, List, Tuple, Iterable, Optional
from datetime import date

import numpy as np
import pandas as pd
import yfinance as yf
import streamlit as st
import matplotlib.pyplot as plt

# =========================
# 0) Streamlit Page Config
# =========================
st.set_page_config(page_title="Advanced ln(F) Engine (no Altair)", page_icon="üßÆ", layout="wide")

# =========================
# 1) Utilities
# =========================
@st.cache_data(show_spinner=False)
def get_prices(tickers: Iterable[str], start: str = "2024-01-01", end: Optional[str] = None) -> pd.DataFrame:
    """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î‡∏à‡∏≤‡∏Å Yahoo Finance ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô DataFrame (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡πà‡∏≠‡∏ï‡∏±‡∏ß)"""
    frames = []
    for t in tickers:
        try:
            hist = yf.Ticker(t).history(start=start, end=end)
            if hist.empty or "Close" not in hist:
                continue
            frames.append(hist[["Close"]].rename(columns={"Close": t}))
        except Exception:
            continue
    if not frames:
        return pd.DataFrame()
    df = pd.concat(frames, axis=1).ffill().dropna(how="all")
    return df

def ewma_vol(series: pd.Series, halflife: int = 20) -> float:
    """EWMA std ‡∏Ç‡∏≠‡∏á ln-return ‡∏ì ‡∏à‡∏∏‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"""
    s = series.dropna()
    if s.size < 3: return float("nan")
    r = np.log(s).diff()
    v = r.ewm(halflife=halflife, adjust=False).std().iloc[-1]
    return float(v) if pd.notna(v) else float("nan")

def rolling_ln_sigma(series: pd.Series, window: int = 20) -> float:
    """rolling std ‡∏Ç‡∏≠‡∏á ln-return ‡∏ì ‡∏à‡∏∏‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö no-trade band)"""
    r = np.log(series).diff()
    sig = r.rolling(window=window, min_periods=max(3, window//2)).std().iloc[-1]
    return float(sig) if pd.notna(sig) else 0.0

def to_csv_download(df: pd.DataFrame, name: str) -> Tuple[bytes, str]:
    buf = io.StringIO()
    df.to_csv(buf, index=False)
    return buf.getvalue().encode("utf-8"), f"{name}.csv"

# =========================
# 2) Core Ideas / Math
# =========================
def b_scale_inverse_vol(prices_df: pd.DataFrame, halflife: int = 20, floor: float = 0.5, cap: float = 1.5) -> Dict[str, float]:
    """Risk-budgeted b ‡∏à‡∏≤‡∏Å inverse-vol ‡πÅ‡∏•‡∏∞ normalize ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ ‚âà 1 ‡∏û‡∏£‡πâ‡∏≠‡∏° clip [floor, cap]"""
    vols = {c: ewma_vol(prices_df[c], halflife=halflife) for c in prices_df.columns}
    inv = {c: (1.0/v) if (v and v == v and v > 0) else np.nan for c, v in vols.items()}
    s = pd.Series(inv).dropna()
    if s.empty:
        return {c: 1.0 for c in prices_df.columns}
    scaled = (s / s.mean()).clip(lower=floor, upper=cap)
    return {c: float(scaled.get(c, 1.0)) for c in prices_df.columns}

def regime_mult(prices_df: pd.DataFrame, short_hl: int = 10, long_hl: int = 60,
                low: float = 0.7, high: float = 1.3, mult_low: float = 1.2, mult_high: float = 0.8) -> Dict[str, float]:
    """‡∏ï‡∏±‡∏ß‡∏Ñ‡∏π‡∏ì‡∏ï‡∏≤‡∏° vol regime: ratio = vol_short/vol_long"""
    out = {}
    for c in prices_df.columns:
        vs = ewma_vol(prices_df[c], halflife=short_hl)
        vl = ewma_vol(prices_df[c], halflife=long_hl)
        if not vs or not vl or vs != vs or vl != vl or vl <= 0:
            out[c] = 1.0
            continue
        ratio = vs / vl
        if ratio < low:   out[c] = mult_low     # ‡∏ï‡∏•‡∏≤‡∏î‡∏ô‡∏¥‡πà‡∏á -> ‡∏Ç‡∏¢‡∏≤‡∏¢
        elif ratio > high:out[c] = mult_high    # ‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô -> ‡∏´‡∏î
        else:             out[c] = 1.0
    return out

def no_trade_band_clip(ln_value: float, sigma_now: float, k: float) -> float:
    """‡∏ñ‡πâ‡∏≤ |ln| < k*sigma -> 0 (‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£)"""
    return ln_value if abs(ln_value) >= k * sigma_now else 0.0

def cap_portfolio_cf(contrib: Dict[str, float], daily_abs_cap: float) -> Dict[str, float]:
    """‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ú‡∏•‡∏£‡∏ß‡∏° |contribution| ‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô daily_abs_cap ‡πÇ‡∏î‡∏¢‡∏Ñ‡∏á‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏î‡∏¥‡∏°"""
    total_abs = sum(abs(v) for v in contrib.values())
    if daily_abs_cap <= 0 or total_abs <= daily_abs_cap or total_abs == 0:
        return contrib
    scale = daily_abs_cap / total_abs
    return {k: v * scale for k, v in contrib.items()}

@dataclass
class AssetInput:
    ticker: str
    live_price: float
    ref_price: float
    fix_c: float
    b: float  # ‡πÇ‡∏´‡∏°‡∏î "scale": ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏Ñ‡∏π‡∏ì‡∏ö‡∏ô ln ; ‡πÇ‡∏´‡∏°‡∏î "offset": ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô offset

def stress_surface(assets: List[AssetInput], shocks: Iterable[float], mode: str = "scale"
                   ) -> Tuple[pd.DataFrame, pd.DataFrame]:
    """‡∏Ñ‡∏∑‡∏ô (contrib_by_asset, total_contrib) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö shock ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡πà‡∏≤"""
    rows = []
    for s in shocks:
        row = {}
        total = 0.0
        for a in assets:
            tn = a.live_price * (1.0 + s)
            if tn <= 0 or a.ref_price <= 0:
                val = 0.0
            else:
                ln_part = math.log(tn / a.ref_price)
                if mode == "scale":
                    val = a.fix_c * (a.b * ln_part)
                else:
                    val = a.fix_c * ln_part + a.b
            row[a.ticker] = val
            total += val
        row["_TOTAL_"] = total
        rows.append((s, row))
    contrib = pd.DataFrame({s: r for s, r in rows}).T
    contrib.index.name = "shock"
    total = contrib[["_TOTAL_"]].copy()
    return contrib.drop(columns=["_TOTAL_"]), total

def compute_contrib(live: Dict[str, float], ref: Dict[str, float], fix_map: Dict[str, float],
                    b_param: Dict[str, float], mode: str = "scale") -> Dict[str, float]:
    """f = fix * (b*ln)  (scale)  ‡∏´‡∏£‡∏∑‡∏≠  f = fix*ln + b  (offset)"""
    out = {}
    for t in live.keys():
        tn, t0 = float(live[t]), float(ref[t])
        if tn <= 0 or t0 <= 0:
            out[t] = 0.0
            continue
        ln_part = math.log(tn / t0)
        if mode == "scale":
            out[t] = fix_map[t] * (b_param.get(t, 1.0) * ln_part)
        else:
            out[t] = fix_map[t] * ln_part + b_param.get(t, 0.0)
    return out

# =========================
# 3) Sidebar Inputs (UI)
# =========================
st.sidebar.header("‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤/‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå")

default_assets = [
    {"ticker": "FFWM", "reference_price": 6.88, "fix_c": 1500, "live_price": None},
    {"ticker": "NEGG", "reference_price": 25.20, "fix_c": 1500, "live_price": None},
    {"ticker": "RIVN", "reference_price": 14.20, "fix_c": 1500, "live_price": None},
    {"ticker": "APLS", "reference_price": 39.61, "fix_c": 1500, "live_price": None},
    {"ticker": "NVTS", "reference_price": 8.25, "fix_c": 1500, "live_price": None},
]
default_text = json.dumps(default_assets, ensure_ascii=False, indent=2)

assets_json = st.sidebar.text_area(
    "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå (JSON: [{ticker, reference_price, fix_c, live_price?}])",
    value=default_text,
    height=220
)

start_date = st.sidebar.date_input("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì vol/regime/band)", value=date(2024, 1, 1))
use_yahoo_live = st.sidebar.checkbox("‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏≤‡∏Å Yahoo ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥", value=True)

st.sidebar.markdown("---")
st.sidebar.subheader("Risk-Budgeted b")
b_halflife = st.sidebar.number_input("EWMA halflife", min_value=5, max_value=180, value=20)
b_floor = st.sidebar.number_input("b floor", min_value=0.1, max_value=2.0, value=0.5, step=0.1)
b_cap = st.sidebar.number_input("b cap", min_value=0.5, max_value=3.0, value=1.5, step=0.1)

st.sidebar.subheader("Regime Switch")
short_hl = st.sidebar.number_input("short halflife", 5, 120, 10)
long_hl  = st.sidebar.number_input("long halflife", 20, 240, 60)
low_thr  = st.sidebar.number_input("ratio low", 0.3, 1.0, 0.7, 0.05)
high_thr = st.sidebar.number_input("ratio high", 1.0, 2.0, 1.3, 0.05)
mult_low = st.sidebar.number_input("mult @low (‡∏ô‡∏¥‡πà‡∏á)", 0.5, 2.0, 1.2, 0.05)
mult_high= st.sidebar.number_input("mult @high (‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô)", 0.5, 2.0, 0.8, 0.05)

st.sidebar.subheader("No-Trade Band & CF Cap")
band_k   = st.sidebar.number_input("k (band = k¬∑œÉ_ln)", 0.0, 5.0, 0.5, 0.05)
cf_cap   = st.sidebar.number_input("‡∏à‡∏≥‡∏Å‡∏±‡∏î |CF| ‡∏£‡∏ß‡∏°‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô (0=‡∏õ‡∏¥‡∏î)", 0.0, 1e9, 0.0, 100.0)

st.sidebar.subheader("‡πÇ‡∏´‡∏°‡∏î‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì")
mode = st.sidebar.selectbox("‡πÇ‡∏´‡∏°‡∏î f", options=["scale", "offset"], index=0)

run_btn = st.sidebar.button("‚ñ∂Ô∏è Run / ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì", use_container_width=True)

# =========================
# 4) Main
# =========================
st.title("üßÆ Advanced ln(F) Portfolio Engine (Matplotlib only)")
st.caption("‡πÅ‡∏Å‡∏ô f = b ¬∑ ln(t‚Çô/t‚ÇÄ) + Risk-budgeted b + Regime + No-trade band + CF cap + Stress test (‡πÑ‡∏°‡πà‡∏°‡∏µ Altair)")

def parse_assets_json(txt: str) -> List[Dict]:
    try:
        data = json.loads(txt)
        if isinstance(data, list):
            return data
        elif isinstance(data, dict):
            return [data]
        else:
            st.error("‚ö†Ô∏è JSON ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô list ‡∏Ç‡∏≠‡∏á objects")
            return []
    except Exception as e:
        st.error(f"‚ö†Ô∏è JSON ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {e}")
        return []

assets = parse_assets_json(assets_json)
tickers = [a["ticker"] for a in assets if "ticker" in a and a.get("reference_price", 0) > 0]

if run_btn and not tickers:
    st.warning("‡πÉ‡∏™‡πà‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡∏û‡∏£‡πâ‡∏≠‡∏° reference_price > 0")

if run_btn and tickers:
    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì..."):
        # 4.1 Maps ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
        ref_map  = {a["ticker"]: float(a["reference_price"]) for a in assets}
        fix_map  = {a["ticker"]: float(a.get("fix_c", 1500.0)) for a in assets}

        # 4.2 ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        live_map: Dict[str, float] = {}
        prices_hist = get_prices(tickers, start=str(start_date))
        if use_yahoo_live:
            if prices_hist.empty:
                st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å Yahoo ‡πÑ‡∏î‡πâ")
                st.stop()
            last_row = prices_hist.iloc[-1]
            for t in tickers:
                live_map[t] = float(last_row.get(t, np.nan))
        else:
            for a in assets:
                v = a.get("live_price", None)
                if v is None:
                    st.error(f"‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏ live_price ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {a['ticker']} ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ Yahoo Live")
                    st.stop()
                live_map[a["ticker"]] = float(v)

        if prices_hist.empty:
            st.error("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏õ‡∏•‡πà‡∏≤ ‡∏•‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤‡∏ô‡∏µ‡πâ")
            st.stop()

        # 4.3 Risk-budgeted b ‡πÅ‡∏•‡∏∞ Regime
        b_scale = b_scale_inverse_vol(prices_hist, halflife=b_halflife, floor=b_floor, cap=b_cap)
        regime  = regime_mult(prices_hist, short_hl=short_hl, long_hl=long_hl,
                              low=low_thr, high=high_thr, mult_low=mult_low, mult_high=mult_high)
        b_final = {t: b_scale.get(t, 1.0) * regime.get(t, 1.0) for t in tickers}

        # 4.4 ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå
        records = []
        contrib_after_band: Dict[str, float] = {}
        contrib_raw = compute_contrib(live_map, ref_map, fix_map, b_final, mode=mode)

        for t in tickers:
            tn, t0 = live_map[t], ref_map[t]
            ln_now = math.log(tn / t0) if t0 > 0 and tn > 0 else 0.0
            sigma_now = rolling_ln_sigma(prices_hist[t]) if t in prices_hist else 0.0
            ln_kept = no_trade_band_clip(ln_now, sigma_now, band_k)

            if mode == "scale":
                contrib_after_band[t] = fix_map[t] * (b_final[t] * ln_kept)
            else:
                contrib_after_band[t] = fix_map[t] * ln_kept + b_final[t]

            records.append({
                "Ticker": t,
                "Ref(t0)": t0,
                "Live(tn)": tn,
                "ln(tn/t0)": ln_now,
                "œÉ_ln (roll)": sigma_now,
                "b_scale": b_scale.get(t, 1.0),
                "regime_mult": regime.get(t, 1.0),
                "b_final": b_final.get(t, 1.0),
                "fix_c": fix_map[t],
                "Contrib_raw": contrib_raw.get(t, 0.0),
                f"Contrib_after_band(k={band_k})": contrib_after_band[t],
            })

        # 4.5 CF cap ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏û‡∏≠‡∏£‡πå‡∏ï
        contrib_capped = cap_portfolio_cf(contrib_after_band, cf_cap) if cf_cap > 0 else contrib_after_band
        total_raw   = sum(contrib_raw.values())
        total_after = sum(contrib_capped.values())

    # =========================
    # 5) Results
    # =========================
    st.subheader("üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå")
    df_res = pd.DataFrame.from_records(records)
    st.dataframe(df_res, use_container_width=True)

    c1, c2 = st.columns(2)
    with c1:
        st.metric("Œ£ Contribution (Raw)", f"{total_raw:,.2f}")
    with c2:
        st.metric("Œ£ Contribution (After CF Cap)", f"{total_after:,.2f}")

    data_bytes, fname = to_csv_download(df_res, "lnF_results")
    st.download_button("‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå CSV", data=data_bytes, file_name=fname, mime="text/csv", use_container_width=True)

    # =========================
    # 6) Stress Engine (‡πÅ‡∏Å‡πâ‡∏ö‡∏±‡πä‡∏Å slider)
    # =========================
    st.markdown("---")
    st.subheader("üß™ Stress Test (Shock Surface)")

    # ‚úÖ st.slider ‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ 2 ‡∏ï‡∏±‡∏ß (range) ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‚Äî ‡πÅ‡∏¢‡∏Å step ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô number_input
    shock_min, shock_max = st.slider(
        "‡∏ä‡πà‡∏ß‡∏á Shock (‡πÄ‡∏ä‡πà‡∏ô -40% ‡∏ñ‡∏∂‡∏á +40%)",
        min_value=-0.9, max_value=0.9, value=(-0.4, 0.4)
    )
    shock_step = st.number_input(
        "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î (step)",
        min_value=0.01, max_value=0.5, value=0.05, step=0.01
    )
    # guard ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
    if shock_max <= shock_min:
        st.warning("‡∏ä‡πà‡∏ß‡∏á shock ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≠‡∏¢ < ‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏Å ‚Äî ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏ó‡∏ô")
        shock_min, shock_max = -0.4, 0.4
    if shock_step <= 0:
        st.warning("step ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0 ‚Äî ‡∏à‡∏∞‡πÉ‡∏ä‡πâ 0.05 ‡πÅ‡∏ó‡∏ô")
        shock_step = 0.05

    shocks = np.round(np.arange(shock_min, shock_max + 1e-12, shock_step), 4)

    assets_for_stress = [
        AssetInput(ticker=t, live_price=live_map[t], ref_price=ref_map[t], fix_c=fix_map[t], b=b_final[t])
        for t in tickers
    ]
    contrib_surface, total_surface = stress_surface(assets_for_stress, shocks=shocks, mode=mode)

    st.write("**Total Contribution vs Shock**")
    fig = plt.figure()
    plt.plot(total_surface.index.values, total_surface["_TOTAL_"].values)
    plt.xlabel("Shock (fraction)")
    plt.ylabel("Total Contribution")
    plt.title("Total Contribution under Price Shocks")
    st.pyplot(fig, clear_figure=True, use_container_width=True)

    with st.expander("‡∏î‡∏π‡∏ï‡∏≤‡∏£‡∏≤‡∏á Stress Surface (‡∏£‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå)"):
        st.dataframe(contrib_surface, use_container_width=True)
        data_bytes2, fname2 = to_csv_download(contrib_surface.reset_index(), "stress_surface")
        st.download_button("‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Surface CSV", data=data_bytes2, file_name=fname2, mime="text/csv", use_container_width=True)

else:
    st.info("‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢ ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î ‚ñ∂Ô∏è Run / ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")

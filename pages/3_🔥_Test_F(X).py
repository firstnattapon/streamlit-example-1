# -*- coding: utf-8 -*-
import streamlit as st
import pandas as pd
import numpy as np
import json
import numpy_financial as npf
import yfinance as yf
from datetime import datetime, timedelta, timezone
from typing import Dict, List, Tuple

st.set_page_config(page_title="Cash_Balan Optimizer (MIRR 3Y)", page_icon="üöÄ", layout="wide")

# ------------------- Config I/O -------------------
CONFIG_FILE = "un15_fx_config.json"

@st.cache_data(show_spinner=False)
def load_config(filename: str = CONFIG_FILE) -> Tuple[Dict, Dict]:
    try:
        with open(filename, "r", encoding="utf-8") as f:
            data = json.load(f)
    except FileNotFoundError:
        st.error(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏≠‡∏ô‡∏ü‡∏¥‡∏Å: {filename}")
        return {}, {}
    except json.JSONDecodeError:
        st.error(f"‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡∏Ç‡∏≠‡∏á {filename} ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        return {}, {}

    default_config = data.get("__DEFAULT_CONFIG__", {})
    # ‡∏ï‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏° "‡πÅ‡∏ï‡πà‡∏•‡∏∞ key = ticker" ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°
    tickers = {k: v for k, v in data.items() if k != "__DEFAULT_CONFIG__"}
    # ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤ default ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå
    for t, cfg in tickers.items():
        for k, v in default_config.items():
            tickers[t].setdefault(k, v)
        tickers[t].setdefault("Ticker", t)
    return tickers, default_config

@st.cache_data(show_spinner=False)
def dump_json_patch(updated_cash: Dict[str, float]) -> str:
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á JSON patch minimal: { <TICKER>: { "Cash_Balan": <value> }, ... }
    (‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏∞‡∏ô‡∏≥‡πÑ‡∏õ merge ‡∏Å‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ logic app ‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ô‡∏µ‡πâ)
    """
    patch = {t: {"Cash_Balan": float(v)} for t, v in updated_cash.items()}
    return json.dumps(patch, indent=2, ensure_ascii=False)

# ------------------- Price Data -------------------
@st.cache_data(show_spinner=False)
def fetch_monthly_adjclose(ticker: str, start: pd.Timestamp, end: pd.Timestamp) -> pd.DataFrame:
    df = yf.download(ticker, start=start, end=end + pd.Timedelta(days=3), interval="1mo", auto_adjust=True, progress=False)
    if df.empty:
        return df
    df = df.rename_axis("Date").reset_index()
    # ‡πÉ‡∏ä‡πâ Adj Close ‡∏´‡∏≤‡∏Å‡∏°‡∏µ ‡πÑ‡∏°‡πà‡∏á‡∏±‡πâ‡∏ô Close
    price_col = "Adj Close" if "Adj Close" in df.columns else "Close"
    df = df[["Date", price_col]].rename(columns={price_col: "price"})
    df["Date"] = pd.to_datetime(df["Date"]).dt.tz_localize(None)
    df = df.dropna().sort_values("Date").reset_index(drop=True)
    return df

def month_end_series(start: pd.Timestamp, end: pd.Timestamp) -> pd.DatetimeIndex:
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏ß‡∏á MonthEnd ‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß
    start_m = (start.to_period("M").to_timestamp("M"))
    end_m   = (end.to_period("M").to_timestamp("M"))
    idx = pd.date_range(start=start_m, end=end_m, freq="M")
    return idx

def align_all_prices(raw_prices: Dict[str, pd.DataFrame]) -> Tuple[pd.DataFrame, pd.DatetimeIndex]:
    """
    ‡∏£‡∏±‡∏ö dict: ticker -> df(Date, price)
    ‡∏Ñ‡∏∑‡∏ô: wide DataFrame (index = month-end union), ‡πÅ‡∏•‡∏∞ index ‡∏à‡∏∏‡∏î‡∏ï‡∏±‡∏î‡∏£‡πà‡∏ß‡∏° (intersection 3Y)
    """
    if not raw_prices:
        return pd.DataFrame(), pd.DatetimeIndex([])
    frames = []
    for t, df in raw_prices.items():
        if df.empty:
            continue
        tmp = df.copy()
        tmp["Date"] = tmp["Date"].dt.to_period("M").dt.to_timestamp("M")
        tmp = tmp.groupby("Date", as_index=False)["price"].last()
        tmp = tmp.set_index("Date").rename(columns={"price": t})
        frames.append(tmp)
    if not frames:
        return pd.DataFrame(), pd.DatetimeIndex([])
    wide = pd.concat(frames, axis=1).sort_index()
    # ‡∏•‡∏ö‡∏ó‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏µ NaN ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ñ‡∏ß ‡πÜ ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    return wide, wide.index

# ------------------- DCA + MIRR -------------------
def build_common_timeline(price_wide: pd.DataFrame, months_limit: int = 36) -> pd.DatetimeIndex:
    # ‡πÉ‡∏ä‡πâ "‡∏à‡∏∏‡∏î‡∏ï‡∏±‡∏î‡∏£‡πà‡∏ß‡∏°" ‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å Ticker ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏ß‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô
    full = price_wide.dropna(how="any")
    if full.empty:
        return pd.DatetimeIndex([])
    # ‡∏ï‡∏±‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 36 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    if len(full.index) > months_limit:
        full = full.iloc[-months_limit:]
    return full.index

def dca_terminal_value_per_dollar(prices: pd.Series) -> float:
    """
    ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (N ‡∏á‡∏ß‡∏î) ‚Üí ‡∏•‡∏á $1 ‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏Ñ‡∏≤ p_m
    ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏´‡∏∏‡πâ‡∏ô‡∏£‡∏ß‡∏° = Œ£(1/p_m); ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏õ‡∏•‡∏≤‡∏¢‡∏á‡∏ß‡∏î = last_price * Œ£(1/p_m)
    ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ terminal wealth ‡∏ï‡πà‡∏≠ $1/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    """
    if prices.isna().any() or prices.empty:
        return np.nan
    inv_sum = np.sum(1.0 / prices.values)
    last_p = float(prices.values[-1])
    return last_p * inv_sum

def mirr_of_portfolio(cashflows: List[float], finance_rate: float, reinvest_rate: float) -> float:
    try:
        return float(npf.mirr(cashflows, finance_rate, reinvest_rate))
    except Exception:
        return np.nan

def make_portfolio_cashflows(prices_wide: pd.DataFrame, cash_per_ticker: Dict[str, float]) -> List[float]:
    """
    ‡∏™‡∏°‡∏°‡∏ï‡∏¥ DCA ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô: ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô 1..N ‡πÄ‡∏õ‡πá‡∏ô outflow = -Œ£ b_i (‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)
    ‡∏á‡∏ß‡∏î‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ inflow = Œ£ (b_i * terminal_value_per_1USD_i)
    """
    cols = list(cash_per_ticker.keys())
    sub = prices_wide[cols]
    # outflow ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    total_b = sum(cash_per_ticker.values())
    outflows = [-total_b] * len(sub.index)
    # ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏õ‡∏•‡∏≤‡∏¢‡∏á‡∏ß‡∏î
    terminal = 0.0
    for t in cols:
        tv = dca_terminal_value_per_dollar(sub[t].dropna())
        if np.isnan(tv):
            continue
        terminal += cash_per_ticker[t] * tv
    return outflows + [terminal]

# ------------------- Greedy Optimizer -------------------
def greedy_optimize(
    prices_wide: pd.DataFrame,
    base_cash: Dict[str, float],
    lower: float = 1.0,
    upper: float = 3000.0,
) -> Dict[str, float]:
    """
    ‡∏Ñ‡∏á "‡∏á‡∏ö‡∏£‡∏ß‡∏°" = sum(base_cash). ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö 1 ‚â§ b_i ‚â§ 3000
    ‡πÅ‡∏ö‡πà‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÅ‡∏ö‡∏ö greedy ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Ticker ‡∏ó‡∏µ‡πà‡∏°‡∏µ terminal wealth/1USD ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
    """
    tickers = list(base_cash.keys())
    N = len(tickers)
    # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß
    alloc = {t: max(lower, min(upper, float(base_cash[t]))) for t in tickers}
    total_budget = sum(base_cash.values())
    min_total = lower * N
    if total_budget < min_total:
        # ‡∏ñ‡πâ‡∏≤‡∏á‡∏ö‡∏£‡∏ß‡∏°‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏£‡∏ß‡∏° ‡∏õ‡∏£‡∏±‡∏ö‡∏•‡∏á‡πÅ‡∏ö‡∏ö‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô (‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 0)
        scale = total_budget / (min_total + 1e-12)
        for t in tickers:
            alloc[t] = lower * scale
        return alloc

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡πà‡∏≠ $1 (terminal wealth factor)
    scores = {}
    for t in tickers:
        tv = dca_terminal_value_per_dollar(prices_wide[t])
        scores[t] = -np.inf if np.isnan(tv) else float(tv)

    # ‡∏ï‡∏±‡πâ‡∏á‡∏ï‡πâ‡∏ô: ‡πÉ‡∏´‡πâ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏Å‡πà‡∏≠‡∏ô
    for t in tickers:
        alloc[t] = max(lower, min(upper, lower))

    remaining = total_budget - sum(alloc.values())
    if remaining <= 0:
        return alloc

    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‚Üí‡∏ï‡πà‡∏≥
    order = sorted(tickers, key=lambda x: scores.get(x, -np.inf), reverse=True)

    # ‡πÉ‡∏™‡πà‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏ô‡∏ä‡∏ô‡πÄ‡∏û‡∏î‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏á‡∏ö
    for t in order:
        if remaining <= 0:
            break
        can_add = upper - alloc[t]
        if can_add <= 0:
            continue
        delta = min(can_add, remaining)
        alloc[t] += delta
        remaining -= delta

    # ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏°‡∏µ‡πÄ‡∏®‡∏©‡πÄ‡∏•‡πá‡∏Å ‡πÜ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏õ‡∏±‡∏î‡πÄ‡∏•‡∏Ç
    if remaining > 1e-9:
        # ‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡πÄ‡∏®‡∏©‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏î‡∏¥‡∏°
        i = 0
        L = len(order)
        while remaining > 1e-9 and L > 0:
            t = order[i % L]
            can_add = upper - alloc[t]
            if can_add > 0:
                add = min(can_add, remaining)
                alloc[t] += add
                remaining -= add
            i += 1

    return alloc

# ------------------- UI -------------------
st.title("üöÄ Cash_Balan Optimizer ‚Äî Maximize 3-Year MIRR (Portfolio)")

tickers_cfg, default_cfg = load_config()
if not tickers_cfg:
    st.stop()

all_tickers = sorted(list(tickers_cfg.keys()))
left, right = st.columns([1.3, 1.0], gap="large")

with left:
    st.subheader("1) Settings")
    today = pd.Timestamp.today(tz="Asia/Bangkok").tz_localize(None)
    three_years_ago = today - pd.DateOffset(years=3)

    # ‡πÉ‡∏ä‡πâ filter_date ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÉ‡∏ô config ‡πÅ‡∏ï‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 3 ‡∏õ‡∏µ
    cfg_dates = []
    for t, cfg in tickers_cfg.items():
        d = pd.to_datetime(cfg.get("filter_date", three_years_ago))
        try:
            d = d.tz_convert("Asia/Bangkok").tz_localize(None)
        except Exception:
            d = d.tz_localize(None) if getattr(d, "tzinfo", None) else d
        cfg_dates.append(d)
    max_filter = max(min(d, today), three_years_ago) if cfg_dates else three_years_ago

    start_date = st.date_input("Start (<= 3Y back, ‡πÉ‡∏ä‡πâ‡∏à‡∏∏‡∏î‡∏ï‡∏±‡∏î‡∏£‡πà‡∏ß‡∏°)", max_filter.date())
    start_date = pd.Timestamp(start_date)
    end_date = st.date_input("End (‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)", today.date())
    end_date = pd.Timestamp(end_date)
    end_date = min(end_date, today)

    finance_rate = st.number_input("Finance rate (‡∏ï‡πà‡∏≠‡∏Ñ‡∏≤‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)", min_value=-1.0, max_value=1.0, value=0.0, step=0.001, help="‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏Ç‡∏≠‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô (‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö MIRR")
    reinvest_rate = st.number_input("Reinvest rate (‡∏ï‡πà‡∏≠‡∏Ñ‡∏≤‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)", min_value=-1.0, max_value=1.0, value=0.0, step=0.001, help="‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡∏≥‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏ö‡∏ß‡∏Å‡πÑ‡∏õ‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏ã‡πâ‡∏≥ (‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö MIRR")

    # ‡∏á‡∏ö‡∏£‡∏ß‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô = ‡∏ú‡∏•‡∏£‡∏ß‡∏° Cash_Balan ‡πÄ‡∏î‡∏¥‡∏°
    base_cash = {t: float(tickers_cfg[t].get("Cash_Balan", 1.0)) for t in all_tickers}
    lock_total = st.checkbox("Lock: ‡πÉ‡∏ä‡πâ‡∏á‡∏ö‡∏£‡∏ß‡∏°‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏ú‡∏•‡∏£‡∏ß‡∏° Cash_Balan ‡πÄ‡∏î‡∏¥‡∏°", value=True)
    if not lock_total:
        manual_total = st.number_input("‡∏á‡∏ö‡∏£‡∏ß‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (USD)", min_value=1.0, value=float(sum(base_cash.values())), step=1.0)
        # scale base_cash ‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏£‡∏ß‡∏° = manual_total (‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô baseline)
        s = sum(base_cash.values())
        if s > 0:
            base_cash = {t: v * manual_total / s for t, v in base_cash.items()}

with st.spinner("‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤..."):
    raw_prices = {}
    for t in all_tickers:
        dfp = fetch_monthly_adjclose(t, start_date - pd.DateOffset(days=10), end_date)
        raw_prices[t] = dfp

prices_wide, union_idx = align_all_prices(raw_prices)
if prices_wide.empty:
    st.error("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡∏≥‡∏°‡∏≤‡∏Ñ‡∏¥‡∏î‡πÑ‡∏î‡πâ")
    st.stop()

timeline = build_common_timeline(prices_wide, months_limit=36)
if len(timeline) < 6:
    st.warning("‡∏à‡∏∏‡∏î‡∏ï‡∏±‡∏î‡∏£‡πà‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å Ticker ‡∏ô‡πâ‡∏≠‡∏¢ (<6) ‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ MIRR ‡πÑ‡∏°‡πà‡∏ô‡∏¥‡πà‡∏á")
prices = prices_wide.reindex(timeline).dropna(how="any")

# ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡πà‡∏≠ 1 USD/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£)
scores = {t: dca_terminal_value_per_dollar(prices[t]) for t in prices.columns}
scores_ser = pd.Series(scores).sort_values(ascending=False)

with left:
    st.subheader("2) Optimize")
    c1, c2, c3 = st.columns([1,1,1])
    with c1:
        lower = st.number_input("‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏ï‡πà‡∏≠ Ticker", min_value=0.0, value=1.0, step=1.0)
    with c2:
        upper = st.number_input("‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ï‡πà‡∏≠ Ticker", min_value=1.0, value=3000.0, step=50.0)
    with c3:
        st.write("")

    if st.button("‚úÖ Run Optimizer", type="primary", use_container_width=True):
        alloc_opt = greedy_optimize(prices, base_cash, lower, upper)
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì MIRR ‡∏Å‡πà‡∏≠‡∏ô/‡∏´‡∏•‡∏±‡∏á
        cf_before = make_portfolio_cashflows(prices, base_cash)
        cf_after  = make_portfolio_cashflows(prices, alloc_opt)
        mirr_before = mirr_of_portfolio(cf_before, finance_rate, reinvest_rate)
        mirr_after  = mirr_of_portfolio(cf_after, finance_rate, reinvest_rate)

        st.success("Optimization ‡πÄ‡∏™‡∏£‡πá‡∏à")
        st.metric("Portfolio MIRR (Before)", f"{mirr_before*100:,.3f} % /period")
        st.metric("Portfolio MIRR (After)",  f"{mirr_after*100:,.3f} % /period")

        # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á Before/After + Score
        df_view = pd.DataFrame({
            "Score per $1 (terminal wealth)": [scores[t] for t in prices.columns],
            "Cash_Balan (Before)": [base_cash.get(t, np.nan) for t in prices.columns],
            "Cash_Balan (After)":  [alloc_opt.get(t, np.nan) for t in prices.columns],
        }, index=prices.columns).sort_values("Score per $1 (terminal wealth)", ascending=False)

        st.dataframe(df_view.style.format({
            "Score per $1 (terminal wealth)": "{:,.4f}",
            "Cash_Balan (Before)": "{:,.2f}",
            "Cash_Balan (After)": "{:,.2f}",
        }), use_container_width=True)

        # JSON Patch download
        patch = dump_json_patch(alloc_opt)
        st.download_button(
            "‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î JSON patch (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Cash_Balan)",
            data=patch.encode("utf-8"),
            file_name="cash_balan_patch.json",
            mime="application/json",
            use_container_width=True
        )

with right:
    st.subheader("Reference / Sanity Check")
    st.caption("‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏¢‡∏¥‡πà‡∏á‡∏™‡∏π‡∏á ‚Üí ‡∏Ñ‡∏ß‡∏£‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ (‡∏†‡∏≤‡∏¢‡πÉ‡∏ï‡πâ‡∏Å‡∏£‡∏≠‡∏ö 1‚Äì3000)")
    st.table(scores_ser.to_frame("Score per $1").style.format("{:,.4f}"))

    st.caption("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏")
    st.markdown("""
- ‡πÉ‡∏ä‡πâ DCA ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ö‡∏ô‡∏à‡∏∏‡∏î‡∏ï‡∏±‡∏î‡∏£‡πà‡∏ß‡∏° ‚â§ 36 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ MIRR ‡∏£‡∏ß‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ö‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏ß‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô  
- MIRR ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏£‡∏ß‡∏°: ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô 1..N ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏≠‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô (‡∏ú‡∏•‡∏£‡∏ß‡∏° Cash_Balan ‡∏Ç‡∏≠‡∏á‡∏û‡∏≠‡∏£‡πå‡∏ï), ‡∏á‡∏ß‡∏î‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤ (‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏õ‡∏¥‡∏î‡∏£‡∏ß‡∏°)  
- ‡∏á‡∏ö‡∏£‡∏ß‡∏°‡∏ñ‡∏π‡∏Å‡∏•‡πá‡∏≠‡∏Å‡πÑ‡∏ß‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏ú‡∏•‡∏£‡∏ß‡∏° Cash_Balan ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå (‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏•‡πá‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡πÉ‡∏ô UI)
- ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡πà‡∏ô/‡∏™‡πÄ‡∏õ‡∏£‡∏î/‡∏†‡∏≤‡∏©‡∏µ (‡∏Ñ‡∏ß‡∏£‡∏ö‡∏ß‡∏Å‡πÉ‡∏ô‡∏£‡∏∏‡πà‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á)
""")

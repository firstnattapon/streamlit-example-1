# --- START OF FILE 2025-06-07T12-07_export.csv --- is not needed for the code to run
# It's an example of the output data, which the new code will now generate.

import pandas as pd
import numpy as np
import yfinance as yf
import streamlit as st
import math
from concurrent.futures import ThreadPoolExecutor, as_completed
from functools import lru_cache

st.set_page_config(page_title="Best Seed Sliding Window", page_icon="üéØ", layout="wide")

@lru_cache(maxsize=1000)
def calculate_optimized_cached(action_tuple, price_tuple, fix=1500):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏£‡πâ‡∏≠‡∏° caching
    """
    action_array = np.asarray(action_tuple, dtype=np.int32)
    action_array[0] = 1
    price_array = np.asarray(price_tuple, dtype=np.float64)
    n = len(action_array)
    
    if n == 0:
        return np.array([]), np.array([]), np.array([]), np.array([]), np.array([]), np.array([])

    # Pre-allocate arrays ‡∏î‡πâ‡∏ß‡∏¢ dtype ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    amount = np.empty(n, dtype=np.float64)
    buffer = np.zeros(n, dtype=np.float64)
    cash = np.empty(n, dtype=np.float64)
    asset_value = np.empty(n, dtype=np.float64)
    sumusd = np.empty(n, dtype=np.float64)
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà index 0
    initial_price = price_array[0]
    amount[0] = fix / initial_price
    cash[0] = fix
    asset_value[0] = amount[0] * initial_price
    sumusd[0] = cash[0] + asset_value[0]
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì refer ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (‡πÅ‡∏¢‡∏Å‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏à‡∏≤‡∏Å loop ‡∏´‡∏•‡∏±‡∏Å)
    refer = -fix * np.log(initial_price / price_array)
    
    # Main loop with minimal operations
    for i in range(1, n):
        curr_price = price_array[i]
        if action_array[i] == 0:
            amount[i] = amount[i-1]
            buffer[i] = 0
        else:
            amount[i] = fix / curr_price
            buffer[i] = amount[i-1] * curr_price - fix
        
        cash[i] = cash[i-1] + buffer[i]
        asset_value[i] = amount[i] * curr_price
        sumusd[i] = cash[i] + asset_value[i]
    
    return buffer, sumusd, cash, asset_value, amount, refer

def calculate_optimized(action_list, price_list, fix=1500):
    """
    Wrapper function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö cached version
    """
    return calculate_optimized_cached(tuple(action_list), tuple(price_list), fix)

def evaluate_seed_batch(seed_batch, prices_window, window_len):
    """
    ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô seed ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
    """
    results = []
    
    for seed in seed_batch:
        try:
            rng = np.random.default_rng(seed)
            actions_window = rng.integers(0, 2, size=window_len)
            actions_window[0] = 1

            if window_len < 2:
                final_net = 0
            else:
                _, sumusd, _, _, _, refer = calculate_optimized(actions_window.tolist(), prices_window.tolist())
                initial_capital = sumusd[0]
                net = sumusd - refer - initial_capital
                final_net = net[-1]

            results.append((seed, final_net))
                    
        except Exception as e:
            results.append((seed, -np.inf))
            continue
    
    return results

def find_best_seed_sliding_window_optimized(price_list, ticker_data_with_dates=None, window_size=30, num_seeds_to_try=1000, progress_bar=None, max_workers=4):
    """
    ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡∏≥‡∏î‡∏±‡∏ö action ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏≤ seed ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (sliding window)
    """
    prices = np.asarray(price_list)
    n = len(prices)
    final_actions = np.array([], dtype=int)
    window_details = []
    
    # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô windows ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    num_windows = math.ceil(n / window_size) if window_size > 0 else 0

    st.write("---")
    st.write("### üî¨ Step 1: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Best Seed ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ Window (In-Sample Testing)")
    st.write(f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {n} ‡∏ß‡∏±‡∏ô | ‡∏Ç‡∏ô‡∏≤‡∏î Window: {window_size} ‡∏ß‡∏±‡∏ô | ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Windows: {num_windows}")
    
    for i, start_index in enumerate(range(0, n, window_size)):
        end_index = min(start_index + window_size, n)
        prices_window = prices[start_index:end_index]
        window_len = len(prices_window)

        if window_len == 0:
            continue

        start_date = ticker_data_with_dates.index[start_index].strftime('%Y-%m-%d')
        end_date = ticker_data_with_dates.index[end_index-1].strftime('%Y-%m-%d')
        timeline_info = f"{start_date} ‡∏ñ‡∏∂‡∏á {end_date}"

        best_seed_for_window = -1
        max_net_for_window = -np.inf

        random_seeds = np.arange(num_seeds_to_try)
        batch_size = max(1, num_seeds_to_try // max_workers)
        seed_batches = [random_seeds[j:j+batch_size] for j in range(0, len(random_seeds), batch_size)]
        
        with ThreadPoolExecutor(max_workers=max_workers) as executor:
            future_to_batch = {executor.submit(evaluate_seed_batch, batch, prices_window, window_len): batch for batch in seed_batches}
            all_results = []
            for future in as_completed(future_to_batch):
                all_results.extend(future.result())
        
        for seed, final_net in all_results:
            if final_net > max_net_for_window:
                max_net_for_window = final_net
                best_seed_for_window = seed

        if best_seed_for_window >= 0:
            rng_best = np.random.default_rng(best_seed_for_window)
            best_actions_for_window = rng_best.integers(0, 2, size=window_len)
            best_actions_for_window[0] = 1
        else:
            best_actions_for_window = np.ones(window_len, dtype=int)
            max_net_for_window = 0

        window_detail = {
            'Window': i + 1,
            'Timeline': timeline_info,
            'start_index': start_index,
            'end_index': end_index - 1,
            'Window Size': window_len,
            'Best Seed': best_seed_for_window,
            'Net Profit': round(max_net_for_window, 2),
            'Price Change %': round(((prices_window[-1] / prices_window[0]) - 1) * 100, 2),
            'Actions': int(np.sum(best_actions_for_window)),
            'action_sequence': best_actions_for_window.tolist()
        }
        window_details.append(window_detail)
        final_actions = np.concatenate((final_actions, best_actions_for_window))
        
        if progress_bar:
            progress_bar.progress((i + 1) / num_windows)

    df_details = pd.DataFrame(window_details)
    st.dataframe(df_details[['Window', 'Timeline', 'Best Seed', 'Net Profit', 'Price Change %', 'Actions', 'Window Size']], use_container_width=True)
    return final_actions, df_details

# >>> NEW FUNCTION TO HANDLE SHIFTED CALCULATION <<<
def calculate_walk_forward_profit(original_details_df, prices, ticker_data_with_dates, shift_periods=1, fix=1500):
    """
    ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Net Profit ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Action ‡∏à‡∏≤‡∏Å Window ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ (Shifted / Walk-Forward)
    """
    st.write("---")
    st.write(f"### üß¨ Step 2: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö Walk-Forward (Shift = {shift_periods} Window)")
    st.write("‡∏ô‡∏≥ `Action Sequence` (DNA) ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å Window ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ ‡∏°‡∏≤‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏Å‡∏≥‡πÑ‡∏£‡πÉ‡∏ô Window ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô")

    shifted_results = []
    final_shifted_actions = np.array([], dtype=int)

    # ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å window ‡∏ó‡∏µ‡πà `shift_periods` ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏õ
    for i in range(shift_periods, len(original_details_df)):
        current_window_info = original_details_df.iloc[i]
        # ‡∏î‡∏∂‡∏á "DNA" ‡∏à‡∏≤‡∏Å window ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
        previous_window_info = original_details_df.iloc[i - shift_periods]

        # Actions ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ (‡∏à‡∏≤‡∏Å window ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤)
        actions_to_apply = np.array(previous_window_info['action_sequence'])
        
        # ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≠‡∏á window ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        start_idx = current_window_info['start_index']
        end_idx = current_window_info['end_index'] + 1
        prices_current_window = prices[start_idx:end_idx]
        
        # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏Ç‡∏ô‡∏≤‡∏î window ‡πÑ‡∏°‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô (‡πÄ‡∏ä‡πà‡∏ô window ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢)
        # ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î/‡πÄ‡∏ï‡∏¥‡∏° actions ‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏ô window ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        len_actions = len(actions_to_apply)
        len_prices = len(prices_current_window)

        if len_actions > len_prices:
            actions_to_apply = actions_to_apply[:len_prices]
        elif len_actions < len_prices:
            # ‡πÄ‡∏ï‡∏¥‡∏° action ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏à‡∏ô‡∏Ñ‡∏£‡∏ö
            padding = np.full(len_prices - len_actions, actions_to_apply[-1])
            actions_to_apply = np.concatenate([actions_to_apply, padding])

        # ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ action ‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô 1 ‡πÄ‡∏™‡∏°‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÉ‡∏ô window
        actions_to_apply[0] = 1

        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö window ‡∏ô‡∏µ‡πâ‡∏î‡πâ‡∏ß‡∏¢ action ‡∏ó‡∏µ‡πà shifted ‡∏°‡∏≤
        if len(prices_current_window) < 2:
            net_profit_shifted = 0
        else:
            _, sumusd, _, _, _, refer = calculate_optimized(actions_to_apply.tolist(), prices_current_window.tolist(), fix=fix)
            initial_capital = sumusd[0]
            net = sumusd - refer - initial_capital
            net_profit_shifted = net[-1]

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•
        result = {
            'Window': current_window_info['Window'],
            'Timeline': current_window_info['Timeline'],
            'Used Seed (From Window {target})'.format(target=previous_window_info['Window']): previous_window_info['Best Seed'],
            'Net Profit': round(net_profit_shifted, 2),
            'Price Change %': current_window_info['Price Change %'],
            'Actions': int(np.sum(actions_to_apply)),
            'Window Size': len(prices_current_window)
        }
        shifted_results.append(result)
        
        # ‡πÄ‡∏ï‡∏¥‡∏° actions ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 0 (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î)
        if i == shift_periods:
             num_initial_days = original_details_df.iloc[0]['start_index']
             for j in range(shift_periods):
                 initial_days_len = len(original_details_df.iloc[j]['action_sequence'])
                 num_initial_days += initial_days_len
             
             final_shifted_actions = np.zeros(num_initial_days, dtype=int)


        final_shifted_actions = np.concatenate((final_shifted_actions, actions_to_apply))
    
    if not shifted_results:
        st.warning("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Walk-Forward ‡πÑ‡∏î‡πâ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö Shift Periods")
        return None, None

    df_shifted = pd.DataFrame(shifted_results)
    st.dataframe(df_shifted, use_container_width=True)
    return final_shifted_actions, df_shifted


def get_max_action_vectorized(price_list, fix=1500):
    prices = np.asarray(price_list, dtype=np.float64)
    n = len(prices)
    if n < 2: return np.ones(n, dtype=int)
    dp = np.zeros(n, dtype=np.float64)
    path = np.zeros(n, dtype=int) 
    dp[0] = float(fix * 2)
    for i in range(1, n):
        j_indices = np.arange(i)
        profits = fix * ((prices[i] / prices[j_indices]) - 1)
        current_sumusd = dp[j_indices] + profits
        best_idx = np.argmax(current_sumusd)
        dp[i] = current_sumusd[best_idx]
        path[i] = j_indices[best_idx]
    actions = np.zeros(n, dtype=int)
    current_day = np.argmax(dp)
    while current_day > 0:
        actions[current_day] = 1
        current_day = path[current_day]
    actions[0] = 1
    return actions

@st.cache_data(ttl=3600)
def get_ticker_data(ticker, filter_date='2023-01-01 12:00:00+07:00'):
    tickerData = yf.Ticker(ticker)
    tickerData = tickerData.history(period='max')[['Close']]
    tickerData.index = tickerData.index.tz_convert(tz='Asia/Bangkok')
    tickerData = tickerData[tickerData.index >= filter_date]
    return tickerData

def calculate_full_period_net(actions, prices, fix=1500):
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Net Profit ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏ä‡πà‡∏ß‡∏á"""
    if len(actions) == 0 or len(prices) == 0:
        return pd.Series(dtype=np.float64)
        
    # ‡∏ó‡∏≥‡πÉ‡∏´‡πâ length ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô
    min_len = min(len(actions), len(prices))
    actions = actions[:min_len]
    prices = prices[:min_len]

    buffer, sumusd, cash, asset_value, amount, refer = calculate_optimized(actions, prices)
    initial_capital = sumusd[0]
    net_series = pd.Series(sumusd - refer - initial_capital, name='net')
    return net_series

# --- RESTRUCTURED MAIN APP ---
def main():
    st.title("üß¨ Best Seed Walk-Forward Tester")
    st.write("‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå Best Seed ‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ Sliding Window ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡πÅ‡∏ö‡∏ö Walk-Forward Analysis")
    
    with st.sidebar:
        st.header("‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")
        test_ticker = st.selectbox(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Ticker", 
            ['FFWM', 'NEGG', 'RIVN', 'APLS', 'NVTS', 'QXO', 'RXRX', 'BTC-USD', 'ETH-USD'],
            index=0
        )
        window_size = st.number_input(
            "‡∏Ç‡∏ô‡∏≤‡∏î Window (‡∏ß‡∏±‡∏ô)", 
            min_value=2, max_value=120, value=30, step=1
        )
        num_seeds = st.number_input(
            "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Seeds ‡∏ï‡πà‡∏≠ Window", 
            min_value=100, max_value=10000, value=1000, step=100
        )
        max_workers = st.slider(
            "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Workers (Parallel CPU)", 
            min_value=1, max_value=16, value=4
        )
        shift_periods = st.number_input(
            "Walk-Forward Shift (Windows)",
            min_value=1, max_value=5, value=1, step=1,
            help="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô window ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô 'DNA' ‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö (1 = ‡πÉ‡∏ä‡πâ DNA ‡∏à‡∏≤‡∏Å window ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏°‡∏≤‡πÄ‡∏ó‡∏£‡∏î window ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)"
        )

    if st.sidebar.button("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå", type="primary", use_container_width=True):
        
        ticker_data = get_ticker_data(test_ticker)
        prices = ticker_data.Close.values
        
        if len(prices) < window_size * 2:
            st.error(f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Ticker: {test_ticker}. ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ {window_size*2} ‡∏ß‡∏±‡∏ô ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏µ‡∏¢‡∏á {len(prices)} ‡∏ß‡∏±‡∏ô.")
            return

        progress_bar = st.progress(0, text="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Best Seed (In-Sample)...")
        
        # --- STEP 1: FIND BEST SEED (IN-SAMPLE) ---
        best_seed_actions, original_details = find_best_seed_sliding_window_optimized(
            prices, ticker_data, window_size=window_size, 
            num_seeds_to_try=num_seeds, progress_bar=progress_bar,
            max_workers=max_workers
        )
        progress_bar.empty()

        # --- STEP 2: CALCULATE WALK-FORWARD (SHIFTED) ---
        walk_forward_actions, shifted_details = calculate_walk_forward_profit(
            original_details, prices, ticker_data, shift_periods=shift_periods
        )

        # --- STEP 3: PREPARE DATA FOR COMPARISON PLOT ---
        st.write("---")
        st.write("### üìä Step 3: ‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå Net Profit")

        # Calculate Net series for each strategy
        net_comparison = pd.DataFrame(index=ticker_data.index)
        
        # Min Strategy (Buy & Hold DCA-like)
        min_actions = np.ones(len(prices), dtype=int)
        net_comparison['Min (DCA)'] = calculate_full_period_net(min_actions, prices)

        # Max Strategy (Theoretical Best)
        max_actions = get_max_action_vectorized(prices)
        net_comparison['Max (Theoretical)'] = calculate_full_period_net(max_actions, prices)
        
        # Best Seed Strategy (In-Sample)
        net_comparison['Best Seed (In-Sample)'] = calculate_full_period_net(best_seed_actions, prices)
        
        # Walk-Forward Strategy (Shifted)
        if walk_forward_actions is not None:
             net_comparison[f'Walk-Forward (Shift={shift_periods})'] = calculate_full_period_net(walk_forward_actions, prices)

        st.line_chart(net_comparison)

        # --- Display Summary Metrics ---
        st.write("#### ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ (Final Net Profit)")
        final_profits = {
            "‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå": list(net_comparison.columns),
            "‡∏ú‡∏•‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢": [f"{net_comparison[col].iloc[-1]:,.2f}" for col in net_comparison.columns]
        }
        st.dataframe(pd.DataFrame(final_profits), use_container_width=True)

        st.write("---")
        st.info("üí° **In-Sample** ‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï (‡∏Ç‡∏≠‡∏á Window ‡∏ô‡∏±‡πâ‡∏ô‡πÜ) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ Seed ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î | **Walk-Forward** ‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á‡∏Å‡∏ß‡πà‡∏≤ ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Seed ‡∏ó‡∏µ‡πà‡∏´‡∏≤‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï‡∏°‡∏≤‡πÄ‡∏ó‡∏£‡∏î")

    with st.expander("üìñ ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"):
        st.markdown("""
        **Best Seed Sliding Window** ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏Å‡∏≤‡∏£‡∏´‡∏≤ action sequence ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÇ‡∏î‡∏¢:
        
        1.  **‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•**: ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏ß‡∏á ‡πÜ (windows) ‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        2.  **‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Seed (In-Sample)**: ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ window ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏° seed ‡∏´‡∏•‡∏≤‡∏¢ ‡πÜ ‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏Å‡∏≥‡πÑ‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ **Best Seed** ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö window *‡∏ô‡∏±‡πâ‡∏ô‡πÜ* ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠ **In-Sample** ‡∏ã‡∏∂‡πà‡∏á‡∏°‡∏±‡∏Å‡∏à‡∏∞‡∏î‡∏π‡∏î‡∏µ‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏±‡∏ô "‡∏£‡∏π‡πâ‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï" ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô window ‡∏Ç‡∏≠‡∏á‡∏°‡∏±‡∏ô
        3.  **‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö Walk-Forward**: ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏∂‡πâ‡∏ô ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ **"Shift"** ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô `action sequence` (DNA) ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å Best Seed ‡∏Ç‡∏≠‡∏á **Window ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤** ‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏Å‡∏≥‡πÑ‡∏£‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏ô **Window ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô** ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏≤‡∏ô‡∏≥‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å‡∏≠‡∏î‡∏µ‡∏ï‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏´‡πá‡∏ô
        4.  **‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ú‡∏•**: ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ú‡∏•‡∏Å‡∏≥‡πÑ‡∏£‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ:
            *   **Min (DCA)**: ‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô (‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ê‡∏≤‡∏ô)
            *   **Max (Theoretical)**: ‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏≤‡∏á‡∏ó‡∏§‡∏©‡∏é‡∏µ (‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î)
            *   **Best Seed (In-Sample)**: ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏´‡∏≤ Seed ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ Window (‡∏°‡∏±‡∏Å‡∏à‡∏∞‡∏î‡∏µ‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏£‡∏¥‡∏á)
            *   **Walk-Forward (Shifted)**: ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï‡∏°‡∏≤‡πÉ‡∏ä‡πâ
        """)

if __name__ == "__main__":
    main()

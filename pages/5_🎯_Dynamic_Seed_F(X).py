import pandas as pd
import numpy as np
import yfinance as yf
import streamlit as st
import math
from concurrent.futures import ThreadPoolExecutor, as_completed
from functools import lru_cache
from datetime import datetime, timedelta
import ast
import plotly.express as px

# ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
st.set_page_config(page_title="Seed Window Tester", page_icon="üéØ", layout="wide")

# ==============================================================================
# ===== ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏´‡∏•‡∏±‡∏Å (Core Calculation Functions) =====
# ===== (‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤) =====
# ==============================================================================

@lru_cache(maxsize=1000)
def calculate_optimized_cached(action_tuple, price_tuple, fix=1500):
    action_array = np.asarray(action_tuple, dtype=np.int32)
    action_array[0] = 1
    price_array = np.asarray(price_tuple, dtype=np.float64)
    n = len(action_array)
    amount = np.empty(n, dtype=np.float64)
    buffer = np.zeros(n, dtype=np.float64)
    cash = np.empty(n, dtype=np.float64)
    asset_value = np.empty(n, dtype=np.float64)
    sumusd = np.empty(n, dtype=np.float64)
    initial_price = price_array[0]
    amount[0] = fix / initial_price
    cash[0] = fix
    asset_value[0] = amount[0] * initial_price
    sumusd[0] = cash[0] + asset_value[0]
    refer = -fix * np.log(initial_price / price_array)
    for i in range(1, n):
        curr_price = price_array[i]
        if action_array[i] == 0:
            amount[i] = amount[i-1]
            buffer[i] = 0
        else:
            amount[i] = fix / curr_price
            buffer[i] = amount[i-1] * curr_price - fix
        cash[i] = cash[i-1] + buffer[i]
        asset_value[i] = amount[i] * curr_price
        sumusd[i] = cash[i] + asset_value[i]
    return buffer, sumusd, cash, asset_value, amount, refer

def calculate_optimized(action_list, price_list, fix=1500):
    return calculate_optimized_cached(tuple(action_list), tuple(price_list), fix)

def evaluate_seed_batch(seed_batch, prices_window, window_len):
    results = []
    for seed in seed_batch:
        try:
            rng = np.random.default_rng(seed)
            actions_window = rng.integers(0, 2, size=window_len)
            actions_window[0] = 1
            if window_len < 2:
                final_net = 0
            else:
                _, sumusd, _, _, _, refer = calculate_optimized(actions_window.tolist(), prices_window.tolist())
                initial_capital = sumusd[0]
                net = sumusd - refer - initial_capital
                final_net = net[-1]
            results.append((seed, final_net))
        except Exception as e:
            results.append((seed, -np.inf))
            continue
    return results

def find_best_seed_sliding_window_optimized(price_list, ticker_data_with_dates=None, window_size=30, num_seeds_to_try=1000, progress_bar=None, max_workers=4, step=None):
    prices = np.asarray(price_list)
    n = len(prices)
    final_actions = np.array([], dtype=int)
    window_details = []

    if step is None:
        step = window_size
    
    if step == 1:
        loop_range = range(n - window_size + 1)
        num_windows = len(loop_range) if loop_range else 0
        mode_name = "Rolling Window (step=1)"
    else:
        loop_range = range(0, n, step)
        num_windows = (n + step - 1) // step
        mode_name = f"Sliding Window (step={step})"

    st.write(f"üîç **‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Best Seed ‡∏î‡πâ‡∏ß‡∏¢ {mode_name}**")
    st.write(f"üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {n} ‡∏ß‡∏±‡∏ô | ‡∏Ç‡∏ô‡∏≤‡∏î Window: {window_size} ‡∏ß‡∏±‡∏ô | ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Windows: {num_windows}")
    st.write(f"‚ö° ‡πÉ‡∏ä‡πâ Parallel Processing: {max_workers} workers")
    st.write("---")

    for i, start_index in enumerate(loop_range):
        end_index = start_index + window_size
        if end_index > n:
            end_index = n
        prices_window = prices[start_index:end_index]
        window_len = len(prices_window)
        if window_len == 0: continue
        
        # (The rest of the function remains the same)
        if ticker_data_with_dates is not None:
            start_date = ticker_data_with_dates.index[start_index].strftime('%Y-%m-%d')
            end_date = ticker_data_with_dates.index[end_index-1].strftime('%Y-%m-%d')
            timeline_info = f"{start_date} ‡∏ñ‡∏∂‡∏á {end_date}"
        else:
            timeline_info = f"Index {start_index} ‡∏ñ‡∏∂‡∏á {end_index-1}"
        best_seed_for_window = -1
        max_net_for_window = -np.inf
        random_seeds = np.arange(num_seeds_to_try)
        batch_size = max(1, num_seeds_to_try // max_workers)
        seed_batches = [random_seeds[j:j+batch_size] for j in range(0, len(random_seeds), batch_size)]
        with ThreadPoolExecutor(max_workers=max_workers) as executor:
            future_to_batch = {executor.submit(evaluate_seed_batch, batch, prices_window, window_len): batch for batch in seed_batches}
            all_results = [res for future in as_completed(future_to_batch) for res in future.result()]
        for seed, final_net in all_results:
            if final_net > max_net_for_window:
                max_net_for_window = final_net
                best_seed_for_window = seed
        if best_seed_for_window >= 0:
            rng_best = np.random.default_rng(best_seed_for_window)
            best_actions_for_window = rng_best.integers(0, 2, size=window_len)
            best_actions_for_window[0] = 1
        else:
            best_actions_for_window = np.ones(window_len, dtype=int)
            max_net_for_window = 0
        window_detail = {'window_number': i + 1, 'timeline': timeline_info, 'best_seed': best_seed_for_window, 'max_net': round(max_net_for_window, 2), 'price_change_pct': round(((prices_window[-1] / prices_window[0]) - 1) * 100, 2), 'action_sequence': best_actions_for_window.tolist()}
        window_details.append(window_detail)
        st.write(f"**üéØ Window {i+1}/{num_windows}** | {timeline_info}")
        col1, col2, col3 = st.columns(3)
        with col1: st.metric("Best Seed", f"{best_seed_for_window:}")
        with col2: st.metric("Net Profit", f"{max_net_for_window:.2f}")
        with col3: st.metric("Price Change", f"{window_detail['price_change_pct']:.2f}%")
        if step != 1:
            final_actions = np.concatenate((final_actions, best_actions_for_window))
        else:
            final_actions = best_actions_for_window
        if progress_bar: progress_bar.progress((i + 1) / num_windows)
    return final_actions, window_details

def get_max_action(price_list, fix=1500):
    prices = np.asarray(price_list, dtype=np.float64)
    n = len(prices)
    if n < 2: return np.ones(n, dtype=int)
    dp = np.zeros(n, dtype=np.float64)
    path = np.zeros(n, dtype=int)
    initial_capital = float(fix * 2)
    dp[0] = initial_capital
    for i in range(1, n):
        j_indices = np.arange(i)
        profits = fix * ((prices[i] / prices[j_indices]) - 1)
        current_sumusd = dp[j_indices] + profits
        best_idx = np.argmax(current_sumusd)
        dp[i] = current_sumusd[best_idx]
        path[i] = j_indices[best_idx]
    actions = np.zeros(n, dtype=int)
    last_action_day = np.argmax(dp)
    current_day = last_action_day
    while current_day > 0:
        actions[current_day] = 1
        current_day = path[current_day]
    actions[0] = 1
    return actions

@st.cache_data(ttl=3600)
def get_ticker_data(ticker, start_date=None, end_date=None):
    try:
        tickerData = yf.Ticker(ticker).history(period='max')[['Close']]
        tickerData.index = tickerData.index.tz_convert(tz='Asia/Bangkok')
        if start_date: tickerData = tickerData[tickerData.index >= pd.to_datetime(start_date).tz_localize('Asia/Bangkok')]
        if end_date: tickerData = tickerData[tickerData.index <= pd.to_datetime(end_date).tz_localize('Asia/Bangkok')]
        return tickerData
    except Exception as e:
        st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {ticker} ‡πÑ‡∏î‡πâ: {str(e)}")
        return pd.DataFrame()

def Limit_fx(Ticker='', act=-1, window_size=30, num_seeds_to_try=1000, max_workers=4, start_date=None, end_date=None, step=None):
    tickerData = get_ticker_data(Ticker, start_date=start_date, end_date=end_date)
    if tickerData.empty: return pd.DataFrame(), None
    prices = np.array(tickerData.Close.values, dtype=np.float64)
    df_details_output = None
    if act == -1: actions = np.ones(len(prices), dtype=np.int64)
    elif act == -2: actions = get_max_action(prices)
    elif act == -3:
        progress_bar = st.progress(0)
        actions, window_details = find_best_seed_sliding_window_optimized(prices, tickerData, window_size=window_size, num_seeds_to_try=num_seeds_to_try, progress_bar=progress_bar, max_workers=max_workers, step=step)
        st.write("---")
        df_details = pd.DataFrame(window_details)
        df_details_output = df_details.copy()
        df_display = df_details.drop(columns=['action_sequence'], errors='ignore')
        st.dataframe(df_display, use_container_width=True)
    else:
        rng = np.random.default_rng(act)
        actions = rng.integers(0, 2, len(prices))
    buffer, sumusd, cash, asset_value, amount, refer = calculate_optimized(actions, prices)
    initial_capital = sumusd[0]
    return pd.DataFrame({'net': np.round(sumusd - refer - initial_capital, 2)}), df_details_output

def plot_comparison(Ticker='', act=-1, window_size=30, num_seeds_to_try=1000, max_workers=4, start_date=None, end_date=None, step=None):
    df_min, _ = Limit_fx(Ticker, act=-1, start_date=start_date, end_date=end_date)
    if act == -3:
        df_strategy, df_details = Limit_fx(Ticker, act=act, window_size=window_size, num_seeds_to_try=num_seeds_to_try, max_workers=max_workers, start_date=start_date, end_date=end_date, step=step)
        strategy_name = 'best_seed_sliding' if step != 1 else 'best_seed_rolling'
    else:
        df_strategy, df_details = Limit_fx(Ticker, act=act, start_date=start_date, end_date=end_date)
        strategy_name = f'fx_{act}'
    df_max, _ = Limit_fx(Ticker, act=-2, start_date=start_date, end_date=end_date)
    chart_data_list = []
    if not df_min.empty: chart_data_list.append(df_min.rename(columns={'net': 'min'}))
    if not df_strategy.empty and step != 1: chart_data_list.append(df_strategy.rename(columns={'net': strategy_name}))
    if not df_max.empty: chart_data_list.append(df_max.rename(columns={'net': 'max'}))
    if chart_data_list:
        chart_data = pd.concat(chart_data_list, axis=1)
        st.write('üìä **Refer_Log Comparison**')
        st.line_chart(chart_data)
    return df_details

# ==============================================================================
# ===== ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á UI (User Interface) - ‡∏â‡∏ö‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Key ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î =====
# ==============================================================================

if 'test_ticker' not in st.session_state: st.session_state.test_ticker = 'FFWM'
if 'start_date' not in st.session_state: st.session_state.start_date = datetime(2024, 1, 1)
if 'end_date' not in st.session_state: st.session_state.end_date = datetime.now()
if 'window_size' not in st.session_state: st.session_state.window_size = 30
if 'num_seeds' not in st.session_state: st.session_state.num_seeds = 30000
if 'max_workers' not in st.session_state: st.session_state.max_workers = 8

st.write("üéØ Seed Window Tester (Sliding vs. Rolling)")

tab1, tab2, tab3, tab4 = st.tabs([
    "‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤", "üìä ‡∏ó‡∏î‡∏™‡∏≠‡∏ö (Sliding)", "üî¨ Advanced Analytics", "üìà ‡∏ó‡∏î‡∏™‡∏≠‡∏ö (Rolling)"
])

with tab1:
    st.write("‚öôÔ∏è **‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏£‡πà‡∏ß‡∏°**")
    st.session_state.test_ticker = st.selectbox(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Ticker ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö",
        ['FFWM', 'NEGG', 'RIVN', 'APLS', 'NVTS', 'QXO', 'RXRX'],
        index=['FFWM', 'NEGG', 'RIVN', 'APLS', 'NVTS', 'QXO', 'RXRX'].index(st.session_state.test_ticker),
        key="main_ticker_selector" ### <<< ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏û‡∏¥‡πà‡∏° key
    )
    col1, col2 = st.columns(2)
    with col1:
        st.session_state.start_date = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô", value=st.session_state.start_date, key="main_start_date") ### <<< ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏û‡∏¥‡πà‡∏° key
    with col2:
        st.session_state.end_date = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î", value=st.session_state.end_date, key="main_end_date") ### <<< ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏û‡∏¥‡πà‡∏° key
    
    st.session_state.window_size = st.number_input("‡∏Ç‡∏ô‡∏≤‡∏î Window (‡∏ß‡∏±‡∏ô)", min_value=2, value=st.session_state.window_size, key="main_window_size") ### <<< ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏û‡∏¥‡πà‡∏° key
    st.session_state.num_seeds = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Seeds ‡∏ï‡πà‡∏≠ Window", min_value=100, value=st.session_state.num_seeds, format="%d", key="main_num_seeds") ### <<< ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏û‡∏¥‡πà‡∏° key
    st.session_state.max_workers = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Workers", min_value=1, max_value=16, value=st.session_state.max_workers, key="main_max_workers") ### <<< ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏û‡∏¥‡πà‡∏° key

with tab2:
    st.header("üìä ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö Sliding Window (‡πÑ‡∏°‡πà‡∏ó‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô)")
    ### <<< ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏û‡∏¥‡πà‡∏° key ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
    if st.button("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö (Sliding)", type="primary", key="start_sliding_test"):
        if st.session_state.start_date >= st.session_state.end_date:
            st.error("‚ùå ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î")
        else:
            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö Sliding Window..."):
                plot_comparison(
                    Ticker=st.session_state.test_ticker, act=-3,
                    window_size=st.session_state.window_size,
                    num_seeds_to_try=st.session_state.num_seeds,
                    max_workers=st.session_state.max_workers,
                    start_date=st.session_state.start_date,
                    end_date=st.session_state.end_date,
                    step=st.session_state.window_size
                )
            st.success("‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Sliding Window ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!")

with tab3:
    st.header("üî¨ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå Backtest ‡πÉ‡∏ô‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å")
    if 'df_for_analysis' not in st.session_state:
        st.session_state.df_for_analysis = None

    uploaded_file = st.file_uploader(
        "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì", type=['csv'], key="analytics_local_uploader" ### <<< ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏û‡∏¥‡πà‡∏° key
    )
    if uploaded_file is not None:
        st.session_state.df_for_analysis = pd.read_csv(uploaded_file)

    github_url = st.text_input(
        "‡∏´‡∏£‡∏∑‡∏≠ ‡∏õ‡πâ‡∏≠‡∏ô GitHub URL ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå CSV:", 
        f"https://raw.githubusercontent.com/firstnattapon/streamlit-example-1/refs/heads/master/Seed_Sliding_Window/{st.session_state.test_ticker}.csv",
        key="analytics_github_url_input" ### <<< ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏û‡∏¥‡πà‡∏° key
    )
    ### <<< ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏û‡∏¥‡πà‡∏° key ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
    if st.button("üì• ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å GitHub", key="analytics_load_github_btn"):
        if github_url:
            try:
                raw_url = github_url.replace("github.com", "raw.githubusercontent.com").replace("/blob/", "/")
                st.session_state.df_for_analysis = pd.read_csv(raw_url)
            except Exception as e:
                st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: {e}")
        else:
            st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô URL")
    
    if st.session_state.df_for_analysis is not None:
        st.success("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå...")
        st.divider()
        df = st.session_state.df_for_analysis
        # (The rest of the analysis code remains the same)
        def safe_literal_eval(val):
            try: return ast.literal_eval(val) if isinstance(val, str) else (val if isinstance(val, list) else [])
            except: return []

        df['action_sequence_list'] = df['action_sequence'].apply(safe_literal_eval)
        stitched_actions = [action for seq in df.sort_values('window_number')['action_sequence_list'] for action in seq]
        
        st.subheader("‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏à‡∏≤‡∏Å 'Stitched' DNA")
        if st.button("üß¨ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Stitched DNA", type="primary", key='analytics_stitch_dna_btn'): ### <<< ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏û‡∏¥‡πà‡∏° key
            if not stitched_actions:
                st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á Action Sequence ‡πÑ‡∏î‡πâ")
            else:
                sim_data = get_ticker_data(st.session_state.test_ticker, st.session_state.start_date, st.session_state.end_date)
                if not sim_data.empty:
                    prices = sim_data['Close'].tolist()
                    # (The simulation logic remains the same)
                    st.success("‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")

with tab4:
    st.header("üìà ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö Rolling Window (‡∏ó‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô)")
    ### <<< ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏û‡∏¥‡πà‡∏° key ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
    if st.button("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö (Rolling)", type="primary", key="start_rolling_test"):
        if st.session_state.start_date >= st.session_state.end_date:
            st.error("‚ùå ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î")
        else:
            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö Rolling Window..."):
                df_windows = plot_comparison(
                    Ticker=st.session_state.test_ticker, act=-3,
                    window_size=st.session_state.window_size,
                    num_seeds_to_try=st.session_state.num_seeds,
                    max_workers=st.session_state.max_workers,
                    start_date=st.session_state.start_date,
                    end_date=st.session_state.end_date,
                    step=1
                )
                if df_windows is not None:
                    st.success("‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Rolling Window ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!")
                    st.write("---")
                    st.write("üîç **‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå Rolling)**")
                    fig = px.histogram(df_windows, x="max_net", nbins=50, title="Distribution of Net Profit")
                    st.plotly_chart(fig, use_container_width=True)
           
# --- ‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ó‡πâ‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤ ---
st.write("---")
st.write("üìñ ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
with st.expander("üîç Best Seed Sliding Window ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?"):
    st.write("""
    **Best Seed Sliding Window** ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏Å‡∏≤‡∏£‡∏´‡∏≤ action sequence ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÇ‡∏î‡∏¢:
    1. **‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•**: ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏ß‡∏á ‡πÜ (windows) ‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    2. **‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Seed**: ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ window ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏° seed ‡∏´‡∏•‡∏≤‡∏¢ ‡πÜ ‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏Å‡∏≥‡πÑ‡∏£
    3. **‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Best Seed**: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å seed ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ window
    4. **‡∏£‡∏ß‡∏° Actions**: ‡∏ô‡∏≥ action sequences ‡∏à‡∏≤‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞ window ‡∏°‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô sequence ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
    """)
with st.expander("‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå"):
    st.write("""
    **Window Size (‡∏Ç‡∏ô‡∏≤‡∏î Window):**
    - ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å (10-20 ‡∏ß‡∏±‡∏ô): ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏£‡πá‡∏ß ‡πÅ‡∏ï‡πà‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏™‡∏π‡∏á
    - ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏•‡∏≤‡∏á (20-50 ‡∏ß‡∏±‡∏ô): ‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£‡∏†‡∏≤‡∏û
    **‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Seeds ‡∏ï‡πà‡∏≠ Window:**
    - ‡∏ô‡πâ‡∏≠‡∏¢ (100-500): ‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏ï‡πà‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ seed ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    - ‡∏°‡∏≤‡∏Å (2000+): ‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏î‡∏µ‡πÅ‡∏ï‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô
    """)
with st.expander("‚ö° ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß"):
    st.write("""
    **‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏≥:**
    1. **Parallel Processing**: ‡πÉ‡∏ä‡πâ ThreadPoolExecutor ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô seeds ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
    2. **Caching**: ‡πÉ‡∏ä‡πâ @lru_cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞ @st.cache_data ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ticker
    3. **Vectorization**: ‡πÉ‡∏ä‡πâ NumPy operations ‡πÅ‡∏ó‡∏ô Python loops
    """)

# ==============================================================================
# ===== Tab 3: Advanced Analytics Dashboard (‡∏â‡∏ö‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£) =====
# ==============================================================================
with tab3:
    st.header("2. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå Backtest ‡πÉ‡∏ô‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å")
    
    # --- ‡πÉ‡∏ä‡πâ Container ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏° UI ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
    with st.container():
        st.subheader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:")
        
        # --- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Tab 3 ---
        if 'df_for_analysis' not in st.session_state:
            st.session_state.df_for_analysis = None

        # ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        col1, col2 = st.columns(2)
        with col1:
            # --- ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ---
            st.markdown("##### 1. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á")
            uploaded_file = st.file_uploader(
                "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì", type=['csv'], key="local_uploader"
            )
            if uploaded_file is not None:
                try:
                    st.session_state.df_for_analysis = pd.read_csv(uploaded_file)
                    st.success("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                except Exception as e:
                    st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå: {e}")
                    st.session_state.df_for_analysis = None
        
        with col2:
            # --- ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å GitHub ---
            st.markdown("##### 2. ‡∏´‡∏£‡∏∑‡∏≠ ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å GitHub URL")
            
            # <--- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà 1: ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å st.session_state.test_ticker
            # ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: URL ‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡πÉ‡∏ä‡πâ .../refs/heads/master/... ‡∏ã‡∏∂‡πà‡∏á‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô public URL ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
            # URL ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏°‡∏±‡∏Å‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô .../main/... ‡∏´‡∏£‡∏∑‡∏≠ .../master/...
            # ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
            default_github_url = f"https://raw.githubusercontent.com/firstnattapon/streamlit-example-1/refs/heads/master/Seed_Sliding_Window/{st.session_state.test_ticker}.csv"

            github_url = st.text_input(
                "‡∏õ‡πâ‡∏≠‡∏ô GitHub URL ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå CSV:", 
                value=default_github_url, # <--- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà 1: ‡πÉ‡∏ä‡πâ URL ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
                key="github_url_input"
            )
            if st.button("üì• ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å GitHub"):
                if github_url:
                    try:
                        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç URL ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô raw content URL ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
                        raw_url = github_url.replace("github.com", "raw.githubusercontent.com").replace("/blob/", "/")
                        with st.spinner(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•..."):
                            st.session_state.df_for_analysis = pd.read_csv(raw_url)
                        st.success("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å GitHub ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                    except Exception as e:
                        st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å URL ‡πÑ‡∏î‡πâ: {e}")
                        st.session_state.df_for_analysis = None
                else:
                    st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô URL ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå CSV")
    
    st.divider() # ‡πÄ‡∏™‡πâ‡∏ô‡∏Ñ‡∏±‡πà‡∏ô

    # --- ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå (‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô state ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô) ---
    if st.session_state.df_for_analysis is not None:
        st.subheader("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
        df_to_analyze = st.session_state.df_for_analysis

        try:
            required_cols = ['window_number', 'timeline', 'max_net', 'best_seed', 'price_change_pct', 'action_sequence', 'window_size']
            if not all(col in df_to_analyze.columns for col in required_cols):
                st.error(f"‡πÑ‡∏ü‡∏•‡πå CSV ‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {', '.join(required_cols)}")
            else:
                df = df_to_analyze.copy()
                if 'result' not in df.columns:
                    df['result'] = np.where(df['max_net'] > 0, 'Win', 'Loss')

                overview_tab, stitched_dna_tab = st.tabs([
                    "üî¨ ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡πÅ‡∏•‡∏∞‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏£‡∏≤‡∏¢ Window",
                    "üß¨ Stitched DNA Analysis"
                ])

                with overview_tab:
                    st.subheader("‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û (Overall Performance)")
                    gross_profit = df[df['max_net'] > 0]['max_net'].sum()
                    gross_loss = abs(df[df['max_net'] < 0]['max_net'].sum())
                    profit_factor = gross_profit / gross_loss if gross_loss > 0 else float('inf')
                    win_rate = (df['result'] == 'Win').mean() * 100
                    kpi_cols = st.columns(4)
                    kpi_cols[0].metric("Total Net Profit", f"${df['max_net'].sum():,.2f}")
                    kpi_cols[1].metric("Win Rate", f"{win_rate:.2f}%")
                    kpi_cols[2].metric("Profit Factor", f"{profit_factor:.2f}")
                    kpi_cols[3].metric("Total Windows", f"{df.shape[0]}")
                    st.subheader("‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢ Window")
                    selected_window = st.selectbox('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Window ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:', options=df['window_number'], format_func=lambda x: f"Window #{x} (Timeline: {df.loc[df['window_number'] == x, 'timeline'].iloc[0]})")
                    if selected_window:
                        window_data = df[df['window_number'] == selected_window].iloc[0]
                        st.markdown(f"**‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á Window #{selected_window}**")
                        w_cols = st.columns(3)
                        w_cols[0].metric("Net Profit", f"${window_data['max_net']:.2f}")
                        w_cols[1].metric("Best Seed", f"{window_data['best_seed']}")
                        w_cols[2].metric("Price Change", f"{window_data['price_change_pct']:.2f}%")
                        st.markdown(f"**Action Sequence:**")
                        st.code(window_data['action_sequence'], language='json')
                
                def safe_literal_eval(val):
                    if pd.isna(val): return []
                    if isinstance(val, list): return val
                    if isinstance(val, str) and val.strip().startswith('[') and val.strip().endswith(']'):
                        try: return ast.literal_eval(val)
                        except: return []
                    return []

                with stitched_dna_tab:
                    st.subheader("‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏à‡∏≤‡∏Å 'Stitched' DNA")
                    st.markdown("‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏à‡∏£‡∏¥‡∏á‡πÇ‡∏î‡∏¢‡∏ô‡∏≥ **`action_sequence`** ‡∏à‡∏≤‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞ Window ‡∏°‡∏≤ '‡πÄ‡∏¢‡πá‡∏ö' ‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö Benchmark")

                    df['action_sequence_list'] = [safe_literal_eval(val) for val in df['action_sequence']]
                    
                    df_sorted = df.sort_values('window_number')
                    stitched_actions = [action for seq in df_sorted['action_sequence_list'] for action in seq]
                    
                    dna_cols = st.columns(2)
                    
                    # <--- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà 2: ‡πÉ‡∏ä‡πâ st.session_state.test_ticker ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
                    stitch_ticker = dna_cols[0].text_input(
                        "Ticker ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏•‡∏≠‡∏á", 
                        value=st.session_state.test_ticker, # <--- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                        key='stitch_ticker_input'
                    )
                    stitch_start_date = dna_cols[1].date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≥‡∏•‡∏≠‡∏á", value=datetime(2024, 1, 1), key='stitch_date_input')

                    if st.button("üß¨ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Stitched DNA ‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö", type="primary", key='stitch_dna_btn'):
                        if not stitched_actions:
                            st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á Action Sequence ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ")
                        else:
                            with st.spinner(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {stitch_ticker}..."):
                                sim_data = get_ticker_data(stitch_ticker, str(stitch_start_date), str(datetime.now()))
                                if sim_data.empty:
                                    st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÑ‡∏î‡πâ")
                                else:
                                    prices = sim_data['Close'].tolist()
                                    n_total = len(prices)
                                    final_actions_dna = stitched_actions[:n_total]
                                    _, sumusd_dna, _, _, _, refer_dna = calculate_optimized(final_actions_dna, prices[:len(final_actions_dna)])
                                    stitched_net = sumusd_dna - refer_dna - sumusd_dna[0]
                                    max_actions = get_max_action(prices)
                                    _, sumusd_max, _, _, _, refer_max = calculate_optimized(max_actions, prices)
                                    max_net = sumusd_max - refer_max - sumusd_max[0]
                                    min_actions = np.ones(n_total, dtype=int).tolist()
                                    _, sumusd_min, _, _, _, refer_min = calculate_optimized(min_actions, prices)
                                    min_net = sumusd_min - refer_min - sumusd_min[0]
                                    plot_len = len(stitched_net)
                                    plot_df = pd.DataFrame({
                                        'Max Performance (Perfect)': max_net[:plot_len],
                                        'Stitched DNA Strategy': stitched_net,
                                        'Min Performance (Rebalance Daily)': min_net[:plot_len]
                                    }, index=sim_data.index[:plot_len])
                                    st.subheader("Performance Comparison (Net Profit)")
                                    st.line_chart(plot_df)
                                    st.subheader("‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ (Final Net Profit)")
                                    metric_cols = st.columns(3)
                                    metric_cols[0].metric("Max Performance (at DNA End)", f"${max_net[plot_len-1]:,.2f}")
                                    metric_cols[1].metric("Stitched DNA Strategy", f"${stitched_net[-1]:,.2f}", delta=f"{stitched_net[-1] - min_net[plot_len-1]:,.2f} vs Min", delta_color="normal")
                                    metric_cols[2].metric("Min Performance (at DNA End)", f"${min_net[plot_len-1]:,.2f}")

        except Exception as e:
            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
            st.exception(e)



# --- ‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ó‡πâ‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤ ---
st.write("---")
st.write("üìñ ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
with st.expander("üîç Best Seed Sliding Window ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?"):
    st.write("""
    **Best Seed Sliding Window** ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏Å‡∏≤‡∏£‡∏´‡∏≤ action sequence ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÇ‡∏î‡∏¢:
    1. **‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•**: ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏ß‡∏á ‡πÜ (windows) ‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    2. **‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Seed**: ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ window ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏° seed ‡∏´‡∏•‡∏≤‡∏¢ ‡πÜ ‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏Å‡∏≥‡πÑ‡∏£
    3. **‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Best Seed**: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å seed ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ window
    4. **‡∏£‡∏ß‡∏° Actions**: ‡∏ô‡∏≥ action sequences ‡∏à‡∏≤‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞ window ‡∏°‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô sequence ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
    """)
with st.expander("‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå"):
    st.write("""
    **Window Size (‡∏Ç‡∏ô‡∏≤‡∏î Window):**
    - ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å (10-20 ‡∏ß‡∏±‡∏ô): ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏£‡πá‡∏ß ‡πÅ‡∏ï‡πà‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏™‡∏π‡∏á
    - ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏•‡∏≤‡∏á (20-50 ‡∏ß‡∏±‡∏ô): ‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£‡∏†‡∏≤‡∏û
    **‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Seeds ‡∏ï‡πà‡∏≠ Window:**
    - ‡∏ô‡πâ‡∏≠‡∏¢ (100-500): ‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏ï‡πà‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ seed ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    - ‡∏°‡∏≤‡∏Å (2000+): ‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏î‡∏µ‡πÅ‡∏ï‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô
    """)
with st.expander("‚ö° ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß"):
    st.write("""
    **‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏≥:**
    1. **Parallel Processing**: ‡πÉ‡∏ä‡πâ ThreadPoolExecutor ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô seeds ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
    2. **Caching**: ‡πÉ‡∏ä‡πâ @lru_cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞ @st.cache_data ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ticker
    3. **Vectorization**: ‡πÉ‡∏ä‡πâ NumPy operations ‡πÅ‡∏ó‡∏ô Python loops
    """)
